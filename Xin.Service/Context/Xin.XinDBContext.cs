//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 2020/4/15 14:31:33
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.ComponentModel;
using System.Reflection;
using System.Data.Common;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Xin.Entities;
using Xin.Common;
using Microsoft.Extensions.Configuration;
using Xin.Repository;

namespace Xin.Service.Context
{

    public partial class XinDBContext : DbContext,IEntityContext
    {

        public XinDBContext() :
            base()
        {
            OnCreated();
        }

        public XinDBContext(DbContextOptions<XinDBContext> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(GetConnectionString("XinConnectionString"));
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        private static string GetConnectionString(string connectionStringName)
        {
            AppConfigurationServices config = new AppConfigurationServices();
            string connectinStr = config.Configuration.GetConnectionString(connectionStringName);
            return connectinStr;     
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<ResDepartment> ResDepartments
        {
            get;
            set;
        }

        public virtual DbSet<ResRole> ResRoles
        {
            get;
            set;
        }

        public virtual DbSet<ResResource> ResResources
        {
            get;
            set;
        }

        public virtual DbSet<ResPermission> ResPermissions
        {
            get;
            set;
        }

        public virtual DbSet<ResUser> ResUsers
        {
            get;
            set;
        }

        public virtual DbSet<ResUserRole> ResUserRoles
        {
            get;
            set;
        }

        public virtual DbSet<ResRolePermission> ResRolePermissions
        {
            get;
            set;
        }

        public virtual DbSet<ResUserPermission> ResUserPermissions
        {
            get;
            set;
        }

        public virtual DbSet<ResAutoCode> ResAutoCodes
        {
            get;
            set;
        }

        public virtual DbSet<ResSchedule> ResSchedules
        {
            get;
            set;
        }

        public virtual DbSet<ResOperateLog> ResOperateLogs
        {
            get;
            set;
        }

        public virtual DbSet<ECOrderConfigData> ECOrderConfigDatas
        {
            get;
            set;
        }

        public virtual DbSet<ECProduct> ECProducts
        {
            get;
            set;
        }

        public virtual DbSet<ECProductBox> ECProductBoxes
        {
            get;
            set;
        }

        public virtual DbSet<ECProductCombination> ECProductCombinations
        {
            get;
            set;
        }

        public virtual DbSet<ECProductCustomCategory> ECProductCustomCategories
        {
            get;
            set;
        }

        public virtual DbSet<ECProductProperty> ECProductProperties
        {
            get;
            set;
        }

        public virtual DbSet<ECSalesOrder> ECSalesOrders
        {
            get;
            set;
        }

        public virtual DbSet<ECSalesOrderAddress> ECSalesOrderAddresses
        {
            get;
            set;
        }

        public virtual DbSet<ECSubProduct> ECSubProducts
        {
            get;
            set;
        }

        public virtual DbSet<ECWarehouse> ECWarehouses
        {
            get;
            set;
        }

        public virtual DbSet<ECSalesOrderDetail> ECSalesOrderDetails
        {
            get;
            set;
        }

        public virtual DbSet<ECReceivingDetail> ECReceivingDetails
        {
            get;
            set;
        }

        public virtual DbSet<ECDeliveryDetail> ECDeliveryDetails
        {
            get;
            set;
        }

        public virtual DbSet<ECRMARefund> ECRMARefunds
        {
            get;
            set;
        }

        public virtual DbSet<ECSkuRelation> ECSkuRelations
        {
            get;
            set;
        }

        public virtual DbSet<ECSkuRelationItem> ECSkuRelationItems
        {
            get;
            set;
        }

        public virtual DbSet<BnsOmsReceivingCodeRecord> BnsOmsReceivingCodeRecords
        {
            get;
            set;
        }

        public virtual DbSet<ECAsn> ECAsns
        {
            get;
            set;
        }

        public virtual DbSet<ECAsnItem> ECAsnItems
        {
            get;
            set;
        }

        public virtual DbSet<ECAsnCost> ECAsnCosts
        {
            get;
            set;
        }

        public virtual DbSet<ECAsnWarehouseAttr> ECAsnWarehouseAttrs
        {
            get;
            set;
        }

        public virtual DbSet<ECAsnProductCost> ECAsnProductCosts
        {
            get;
            set;
        }

        public virtual DbSet<BnsUsBaseInventory> BnsUsBaseInventories
        {
            get;
            set;
        }

        public virtual DbSet<ECShipBatch> ECShipBatches
        {
            get;
            set;
        }

        public virtual DbSet<ECShipBatchPackingInfo> ECShipBatchPackingInfos
        {
            get;
            set;
        }

        public virtual DbSet<ECShipBatchProductInfo> ECShipBatchProductInfos
        {
            get;
            set;
        }

        public virtual DbSet<ECFbaBoxDetail> ECFbaBoxDetails
        {
            get;
            set;
        }

        public virtual DbSet<ECFbaFinalBox> ECFbaFinalBoxes
        {
            get;
            set;
        }

        public virtual DbSet<ECFbaLog> ECFbaLogs
        {
            get;
            set;
        }

        public virtual DbSet<ECFbaOmsBox> ECFbaOmsBoxes
        {
            get;
            set;
        }

        public virtual DbSet<ECFbaOrder> ECFbaOrders
        {
            get;
            set;
        }

        public virtual DbSet<ECFbaPackBox> ECFbaPackBoxes
        {
            get;
            set;
        }

        public virtual DbSet<ECFbaPackDetail> ECFbaPackDetails
        {
            get;
            set;
        }

        public virtual DbSet<ECFbaQueryOrder> ECFbaQueryOrders
        {
            get;
            set;
        }

        public virtual DbSet<ECFbaTransitBox> ECFbaTransitBoxes
        {
            get;
            set;
        }

        public virtual DbSet<ECFbaBox> ECFbaBoxes
        {
            get;
            set;
        }

        public virtual DbSet<ECProcessedSkuRelationItem> ECProcessedSkuRelationItems
        {
            get;
            set;
        }

        public virtual DbSet<ECProcessedSkuRelation> ECProcessedSkuRelations
        {
            get;
            set;
        }

        public virtual DbSet<ResMenu> ResMenus
        {
            get;
            set;
        }

        public virtual DbSet<ECCountry> ECCountries
        {
            get;
            set;
        }

        public virtual DbSet<BnsAmazonInstance> BnsAmazonInstances
        {
            get;
            set;
        }

        public virtual DbSet<BnsAmazonReport> BnsAmazonReports
        {
            get;
            set;
        }

        public virtual DbSet<BnsAmazonReportDetail> BnsAmazonReportDetails
        {
            get;
            set;
        }

        public virtual DbSet<BnsPaypalInstance> BnsPaypalInstances
        {
            get;
            set;
        }

        public virtual DbSet<BnsPaypalTransactionDetail> BnsPaypalTransactionDetails
        {
            get;
            set;
        }

        public virtual DbSet<BnsPaypalTransactionDetailsCartInfo> BnsPaypalTransactionDetailsCartInfos
        {
            get;
            set;
        }

        public virtual DbSet<BnsSendDeliverdToEc> BnsSendDeliverdToEcs
        {
            get;
            set;
        }

        public virtual DbSet<BnsShippingEcToTrackingMore> BnsShippingEcToTrackingMores
        {
            get;
            set;
        }

        public virtual DbSet<ECAliexpressLoaninfo> ECAliexpressLoaninfos
        {
            get;
            set;
        }

        public virtual DbSet<ECDHCost> ECDHCosts
        {
            get;
            set;
        }

        public virtual DbSet<ECRepeatCust> ECRepeatCusts
        {
            get;
            set;
        }

        public virtual DbSet<ECShippingMethod> ECShippingMethods
        {
            get;
            set;
        }

        public virtual DbSet<ECUser> ECUsers
        {
            get;
            set;
        }

        public virtual DbSet<ECOrderInfo> ECOrderInfos
        {
            get;
            set;
        }

        public virtual DbSet<ECOrderInfoBarcode> ECOrderInfoBarcodes
        {
            get;
            set;
        }

        public virtual DbSet<ECOrderInfoOdaTypeArr> ECOrderInfoOdaTypeArrs
        {
            get;
            set;
        }

        public virtual DbSet<ECOrderInfoOpNode> ECOrderInfoOpNodes
        {
            get;
            set;
        }

        public virtual DbSet<ECOrderInfoOrder> ECOrderInfoOrders
        {
            get;
            set;
        }

        public virtual DbSet<ECOrderInfoOrderLog> ECOrderInfoOrderLogs
        {
            get;
            set;
        }

        public virtual DbSet<ECOrderInfoProduct> ECOrderInfoProducts
        {
            get;
            set;
        }

        public virtual DbSet<ECOrderInfoShip> ECOrderInfoShips
        {
            get;
            set;
        }

        public virtual DbSet<ECOrderInfoOrderStatu> ECOrderInfoOrderStatus
        {
            get;
            set;
        }

        public virtual DbSet<ECOrderInfoAddrCountry> ECOrderInfoAddrCountries
        {
            get;
            set;
        }

        public virtual DbSet<ECOrderInfoAdress> ECOrderInfoAdresses
        {
            get;
            set;
        }

        public virtual DbSet<ECOrderInfoPackageInfo> ECOrderInfoPackageInfos
        {
            get;
            set;
        }

        public virtual DbSet<ECOrderInfoPackageList> ECOrderInfoPackageLists
        {
            get;
            set;
        }

        public virtual DbSet<ECRmaRefa> ECRmaRefas
        {
            get;
            set;
        }

        public virtual DbSet<BnsMgSalesChildOrder> BnsMgSalesChildOrders
        {
            get;
            set;
        }

        #region Methods

        public void GetAutoCode (string fixHeader, int? length, ref string code)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetAutoCode";

                    DbParameter fixHeaderParameter = cmd.CreateParameter();
                    fixHeaderParameter.ParameterName = "fixHeader";
                    fixHeaderParameter.Direction = ParameterDirection.Input;
                    fixHeaderParameter.DbType = DbType.String;
                    fixHeaderParameter.Size = 20;
                    if (fixHeader != null)
                    {
                        fixHeaderParameter.Value = fixHeader;
                    }
                    else
                    {
                        fixHeaderParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(fixHeaderParameter);

                    DbParameter lengthParameter = cmd.CreateParameter();
                    lengthParameter.ParameterName = "length";
                    lengthParameter.Direction = ParameterDirection.Input;
                    lengthParameter.DbType = DbType.Int32;
                    lengthParameter.Precision = 10;
                    lengthParameter.Scale = 0;
                    if (length.HasValue)
                    {
                        lengthParameter.Value = length.Value;
                    }
                    else
                    {
                        lengthParameter.Size = -1;
                        lengthParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(lengthParameter);

                    DbParameter codeParameter = cmd.CreateParameter();
                    codeParameter.ParameterName = "code";
                    codeParameter.Direction = ParameterDirection.InputOutput;
                    codeParameter.DbType = DbType.String;
                    codeParameter.Size = 60;
                    if (code != null)
                    {
                        codeParameter.Value = code;
                    }
                    else
                    {
                        codeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(codeParameter);
                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters["code"].Value != null && !(cmd.Parameters["code"].Value is System.DBNull))
                        code = (string)Convert.ChangeType(cmd.Parameters["code"].Value, typeof(string));
                    else
                        code = default(string);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task<Tuple<string>> GetAutoCodeAsync (string fixHeader, int? length, string code)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetAutoCode";

                    DbParameter fixHeaderParameter = cmd.CreateParameter();
                    fixHeaderParameter.ParameterName = "fixHeader";
                    fixHeaderParameter.Direction = ParameterDirection.Input;
                    fixHeaderParameter.DbType = DbType.String;
                    fixHeaderParameter.Size = 20;
                    if (fixHeader != null)
                    {
                        fixHeaderParameter.Value = fixHeader;
                    }
                    else
                    {
                        fixHeaderParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(fixHeaderParameter);

                    DbParameter lengthParameter = cmd.CreateParameter();
                    lengthParameter.ParameterName = "length";
                    lengthParameter.Direction = ParameterDirection.Input;
                    lengthParameter.DbType = DbType.Int32;
                    lengthParameter.Precision = 10;
                    lengthParameter.Scale = 0;
                    if (length.HasValue)
                    {
                        lengthParameter.Value = length.Value;
                    }
                    else
                    {
                        lengthParameter.Size = -1;
                        lengthParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(lengthParameter);

                    DbParameter codeParameter = cmd.CreateParameter();
                    codeParameter.ParameterName = "code";
                    codeParameter.Direction = ParameterDirection.InputOutput;
                    codeParameter.DbType = DbType.String;
                    codeParameter.Size = 60;
                    if (code != null)
                    {
                        codeParameter.Value = code;
                    }
                    else
                    {
                        codeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(codeParameter);
                    await cmd.ExecuteNonQueryAsync();

                    if (cmd.Parameters["code"].Value != null && !(cmd.Parameters["code"].Value is System.DBNull))
                        code = (string)Convert.ChangeType(cmd.Parameters["code"].Value, typeof(string));
                    else
                        code = default(string);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<string>(code);
        }

        public List<CwAccountQuerySpResult> CwAccountQuerySp (string PlateForm, string StoreName, string WareHouseDesc, string ProductSku, string ProcutCategoryName1, string ProcutCategoryName2, string OrderType, string Status, string RefNo, string reqIndex, string reqSize)
        {

            List<CwAccountQuerySpResult> result = new List<CwAccountQuerySpResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.CwAccountQuery_sp";

                    DbParameter PlateFormParameter = cmd.CreateParameter();
                    PlateFormParameter.ParameterName = "PlateForm";
                    PlateFormParameter.Direction = ParameterDirection.Input;
                    PlateFormParameter.DbType = DbType.String;
                    PlateFormParameter.Size = 100;
                    if (PlateForm != null)
                    {
                        PlateFormParameter.Value = PlateForm;
                    }
                    else
                    {
                        PlateFormParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(PlateFormParameter);

                    DbParameter StoreNameParameter = cmd.CreateParameter();
                    StoreNameParameter.ParameterName = "StoreName";
                    StoreNameParameter.Direction = ParameterDirection.Input;
                    StoreNameParameter.DbType = DbType.String;
                    StoreNameParameter.Size = 100;
                    if (StoreName != null)
                    {
                        StoreNameParameter.Value = StoreName;
                    }
                    else
                    {
                        StoreNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(StoreNameParameter);

                    DbParameter WareHouseDescParameter = cmd.CreateParameter();
                    WareHouseDescParameter.ParameterName = "WareHouseDesc";
                    WareHouseDescParameter.Direction = ParameterDirection.Input;
                    WareHouseDescParameter.DbType = DbType.String;
                    WareHouseDescParameter.Size = 100;
                    if (WareHouseDesc != null)
                    {
                        WareHouseDescParameter.Value = WareHouseDesc;
                    }
                    else
                    {
                        WareHouseDescParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(WareHouseDescParameter);

                    DbParameter ProductSkuParameter = cmd.CreateParameter();
                    ProductSkuParameter.ParameterName = "ProductSku";
                    ProductSkuParameter.Direction = ParameterDirection.Input;
                    ProductSkuParameter.DbType = DbType.String;
                    ProductSkuParameter.Size = 100;
                    if (ProductSku != null)
                    {
                        ProductSkuParameter.Value = ProductSku;
                    }
                    else
                    {
                        ProductSkuParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ProductSkuParameter);

                    DbParameter ProcutCategoryName1Parameter = cmd.CreateParameter();
                    ProcutCategoryName1Parameter.ParameterName = "ProcutCategoryName1";
                    ProcutCategoryName1Parameter.Direction = ParameterDirection.Input;
                    ProcutCategoryName1Parameter.DbType = DbType.String;
                    ProcutCategoryName1Parameter.Size = 100;
                    if (ProcutCategoryName1 != null)
                    {
                        ProcutCategoryName1Parameter.Value = ProcutCategoryName1;
                    }
                    else
                    {
                        ProcutCategoryName1Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ProcutCategoryName1Parameter);

                    DbParameter ProcutCategoryName2Parameter = cmd.CreateParameter();
                    ProcutCategoryName2Parameter.ParameterName = "ProcutCategoryName2";
                    ProcutCategoryName2Parameter.Direction = ParameterDirection.Input;
                    ProcutCategoryName2Parameter.DbType = DbType.String;
                    ProcutCategoryName2Parameter.Size = 100;
                    if (ProcutCategoryName2 != null)
                    {
                        ProcutCategoryName2Parameter.Value = ProcutCategoryName2;
                    }
                    else
                    {
                        ProcutCategoryName2Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ProcutCategoryName2Parameter);

                    DbParameter OrderTypeParameter = cmd.CreateParameter();
                    OrderTypeParameter.ParameterName = "OrderType";
                    OrderTypeParameter.Direction = ParameterDirection.Input;
                    OrderTypeParameter.DbType = DbType.String;
                    OrderTypeParameter.Size = 100;
                    if (OrderType != null)
                    {
                        OrderTypeParameter.Value = OrderType;
                    }
                    else
                    {
                        OrderTypeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(OrderTypeParameter);

                    DbParameter StatusParameter = cmd.CreateParameter();
                    StatusParameter.ParameterName = "Status";
                    StatusParameter.Direction = ParameterDirection.Input;
                    StatusParameter.DbType = DbType.String;
                    StatusParameter.Size = 100;
                    if (Status != null)
                    {
                        StatusParameter.Value = Status;
                    }
                    else
                    {
                        StatusParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(StatusParameter);

                    DbParameter RefNoParameter = cmd.CreateParameter();
                    RefNoParameter.ParameterName = "RefNo";
                    RefNoParameter.Direction = ParameterDirection.Input;
                    RefNoParameter.DbType = DbType.String;
                    RefNoParameter.Size = 100;
                    if (RefNo != null)
                    {
                        RefNoParameter.Value = RefNo;
                    }
                    else
                    {
                        RefNoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RefNoParameter);

                    DbParameter reqIndexParameter = cmd.CreateParameter();
                    reqIndexParameter.ParameterName = "reqIndex";
                    reqIndexParameter.Direction = ParameterDirection.Input;
                    reqIndexParameter.DbType = DbType.String;
                    reqIndexParameter.Size = 100;
                    if (reqIndex != null)
                    {
                        reqIndexParameter.Value = reqIndex;
                    }
                    else
                    {
                        reqIndexParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(reqIndexParameter);

                    DbParameter reqSizeParameter = cmd.CreateParameter();
                    reqSizeParameter.ParameterName = "reqSize";
                    reqSizeParameter.Direction = ParameterDirection.Input;
                    reqSizeParameter.DbType = DbType.String;
                    reqSizeParameter.Size = 100;
                    if (reqSize != null)
                    {
                        reqSizeParameter.Value = reqSize;
                    }
                    else
                    {
                        reqSizeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(reqSizeParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            CwAccountQuerySpResult row = new CwAccountQuerySpResult();
                            if (fieldNames.Contains("orderDesc") && !reader.IsDBNull(reader.GetOrdinal("orderDesc")))
                                row.OrderDesc = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"orderDesc")), typeof(string));
                            else
                                row.OrderDesc = null;

                            if (fieldNames.Contains("DatePaidPlatform") && !reader.IsDBNull(reader.GetOrdinal("DatePaidPlatform")))
                                row.DatePaidPlatform = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"DatePaidPlatform")), typeof(System.DateTime));
                            else
                                row.DatePaidPlatform = null;

                            if (fieldNames.Contains("FkType") && !reader.IsDBNull(reader.GetOrdinal("FkType")))
                                row.FkType = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FkType")), typeof(string));

                            if (fieldNames.Contains("DateWarehouseShipping") && !reader.IsDBNull(reader.GetOrdinal("DateWarehouseShipping")))
                                row.DateWarehouseShipping = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"DateWarehouseShipping")), typeof(System.DateTime));
                            else
                                row.DateWarehouseShipping = null;

                            if (fieldNames.Contains("status") && !reader.IsDBNull(reader.GetOrdinal("status")))
                                row.Status = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"status")), typeof(string));
                            else
                                row.Status = null;

                            if (fieldNames.Contains("saleOrderCode") && !reader.IsDBNull(reader.GetOrdinal("saleOrderCode")))
                                row.SaleOrderCode = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"saleOrderCode")), typeof(string));
                            else
                                row.SaleOrderCode = null;

                            if (fieldNames.Contains("refNo") && !reader.IsDBNull(reader.GetOrdinal("refNo")))
                                row.RefNo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"refNo")), typeof(string));
                            else
                                row.RefNo = null;

                            if (fieldNames.Contains("warehouseOrderCode") && !reader.IsDBNull(reader.GetOrdinal("warehouseOrderCode")))
                                row.WarehouseOrderCode = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warehouseOrderCode")), typeof(string));
                            else
                                row.WarehouseOrderCode = null;

                            if (fieldNames.Contains("orderType") && !reader.IsDBNull(reader.GetOrdinal("orderType")))
                                row.OrderType = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"orderType")), typeof(string));
                            else
                                row.OrderType = null;

                            if (fieldNames.Contains("country_name") && !reader.IsDBNull(reader.GetOrdinal("country_name")))
                                row.CountryName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"country_name")), typeof(string));
                            else
                                row.CountryName = null;

                            if (fieldNames.Contains("warehousedesc") && !reader.IsDBNull(reader.GetOrdinal("warehousedesc")))
                                row.Warehousedesc = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warehousedesc")), typeof(string));
                            else
                                row.Warehousedesc = null;

                            if (fieldNames.Contains("ProductSku") && !reader.IsDBNull(reader.GetOrdinal("ProductSku")))
                                row.ProductSku = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ProductSku")), typeof(string));
                            else
                                row.ProductSku = null;

                            if (fieldNames.Contains("AmazonSKU") && !reader.IsDBNull(reader.GetOrdinal("AmazonSKU")))
                                row.AmazonSKU = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"AmazonSKU")), typeof(string));
                            else
                                row.AmazonSKU = null;

                            if (fieldNames.Contains("SpUnitPrice") && !reader.IsDBNull(reader.GetOrdinal("SpUnitPrice")))
                                row.SpUnitPrice = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"SpUnitPrice")), typeof(string));

                            if (fieldNames.Contains("ZSpUnitPrice") && !reader.IsDBNull(reader.GetOrdinal("ZSpUnitPrice")))
                                row.ZSpUnitPrice = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ZSpUnitPrice")), typeof(decimal));

                            if (fieldNames.Contains("DhCost") && !reader.IsDBNull(reader.GetOrdinal("DhCost")))
                                row.DhCost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"DhCost")), typeof(decimal));

                            if (fieldNames.Contains("productNetWeight") && !reader.IsDBNull(reader.GetOrdinal("productNetWeight")))
                                row.ProductNetWeight = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"productNetWeight")), typeof(decimal));

                            if (fieldNames.Contains("ZproductNetWeight") && !reader.IsDBNull(reader.GetOrdinal("ZproductNetWeight")))
                                row.ZproductNetWeight = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ZproductNetWeight")), typeof(decimal));
                            else
                                row.ZproductNetWeight = null;

                            if (fieldNames.Contains("Qty") && !reader.IsDBNull(reader.GetOrdinal("Qty")))
                                row.Qty = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Qty")), typeof(int));
                            else
                                row.Qty = null;

                            if (fieldNames.Contains("Company") && !reader.IsDBNull(reader.GetOrdinal("Company")))
                                row.Company = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Company")), typeof(string));
                            else
                                row.Company = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<CwAccountQuerySpResult>> CwAccountQuerySpAsync (string PlateForm, string StoreName, string WareHouseDesc, string ProductSku, string ProcutCategoryName1, string ProcutCategoryName2, string OrderType, string Status, string RefNo, string reqIndex, string reqSize)
        {

            List<CwAccountQuerySpResult> result = new List<CwAccountQuerySpResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.CwAccountQuery_sp";

                    DbParameter PlateFormParameter = cmd.CreateParameter();
                    PlateFormParameter.ParameterName = "PlateForm";
                    PlateFormParameter.Direction = ParameterDirection.Input;
                    PlateFormParameter.DbType = DbType.String;
                    PlateFormParameter.Size = 100;
                    if (PlateForm != null)
                    {
                        PlateFormParameter.Value = PlateForm;
                    }
                    else
                    {
                        PlateFormParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(PlateFormParameter);

                    DbParameter StoreNameParameter = cmd.CreateParameter();
                    StoreNameParameter.ParameterName = "StoreName";
                    StoreNameParameter.Direction = ParameterDirection.Input;
                    StoreNameParameter.DbType = DbType.String;
                    StoreNameParameter.Size = 100;
                    if (StoreName != null)
                    {
                        StoreNameParameter.Value = StoreName;
                    }
                    else
                    {
                        StoreNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(StoreNameParameter);

                    DbParameter WareHouseDescParameter = cmd.CreateParameter();
                    WareHouseDescParameter.ParameterName = "WareHouseDesc";
                    WareHouseDescParameter.Direction = ParameterDirection.Input;
                    WareHouseDescParameter.DbType = DbType.String;
                    WareHouseDescParameter.Size = 100;
                    if (WareHouseDesc != null)
                    {
                        WareHouseDescParameter.Value = WareHouseDesc;
                    }
                    else
                    {
                        WareHouseDescParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(WareHouseDescParameter);

                    DbParameter ProductSkuParameter = cmd.CreateParameter();
                    ProductSkuParameter.ParameterName = "ProductSku";
                    ProductSkuParameter.Direction = ParameterDirection.Input;
                    ProductSkuParameter.DbType = DbType.String;
                    ProductSkuParameter.Size = 100;
                    if (ProductSku != null)
                    {
                        ProductSkuParameter.Value = ProductSku;
                    }
                    else
                    {
                        ProductSkuParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ProductSkuParameter);

                    DbParameter ProcutCategoryName1Parameter = cmd.CreateParameter();
                    ProcutCategoryName1Parameter.ParameterName = "ProcutCategoryName1";
                    ProcutCategoryName1Parameter.Direction = ParameterDirection.Input;
                    ProcutCategoryName1Parameter.DbType = DbType.String;
                    ProcutCategoryName1Parameter.Size = 100;
                    if (ProcutCategoryName1 != null)
                    {
                        ProcutCategoryName1Parameter.Value = ProcutCategoryName1;
                    }
                    else
                    {
                        ProcutCategoryName1Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ProcutCategoryName1Parameter);

                    DbParameter ProcutCategoryName2Parameter = cmd.CreateParameter();
                    ProcutCategoryName2Parameter.ParameterName = "ProcutCategoryName2";
                    ProcutCategoryName2Parameter.Direction = ParameterDirection.Input;
                    ProcutCategoryName2Parameter.DbType = DbType.String;
                    ProcutCategoryName2Parameter.Size = 100;
                    if (ProcutCategoryName2 != null)
                    {
                        ProcutCategoryName2Parameter.Value = ProcutCategoryName2;
                    }
                    else
                    {
                        ProcutCategoryName2Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(ProcutCategoryName2Parameter);

                    DbParameter OrderTypeParameter = cmd.CreateParameter();
                    OrderTypeParameter.ParameterName = "OrderType";
                    OrderTypeParameter.Direction = ParameterDirection.Input;
                    OrderTypeParameter.DbType = DbType.String;
                    OrderTypeParameter.Size = 100;
                    if (OrderType != null)
                    {
                        OrderTypeParameter.Value = OrderType;
                    }
                    else
                    {
                        OrderTypeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(OrderTypeParameter);

                    DbParameter StatusParameter = cmd.CreateParameter();
                    StatusParameter.ParameterName = "Status";
                    StatusParameter.Direction = ParameterDirection.Input;
                    StatusParameter.DbType = DbType.String;
                    StatusParameter.Size = 100;
                    if (Status != null)
                    {
                        StatusParameter.Value = Status;
                    }
                    else
                    {
                        StatusParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(StatusParameter);

                    DbParameter RefNoParameter = cmd.CreateParameter();
                    RefNoParameter.ParameterName = "RefNo";
                    RefNoParameter.Direction = ParameterDirection.Input;
                    RefNoParameter.DbType = DbType.String;
                    RefNoParameter.Size = 100;
                    if (RefNo != null)
                    {
                        RefNoParameter.Value = RefNo;
                    }
                    else
                    {
                        RefNoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(RefNoParameter);

                    DbParameter reqIndexParameter = cmd.CreateParameter();
                    reqIndexParameter.ParameterName = "reqIndex";
                    reqIndexParameter.Direction = ParameterDirection.Input;
                    reqIndexParameter.DbType = DbType.String;
                    reqIndexParameter.Size = 100;
                    if (reqIndex != null)
                    {
                        reqIndexParameter.Value = reqIndex;
                    }
                    else
                    {
                        reqIndexParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(reqIndexParameter);

                    DbParameter reqSizeParameter = cmd.CreateParameter();
                    reqSizeParameter.ParameterName = "reqSize";
                    reqSizeParameter.Direction = ParameterDirection.Input;
                    reqSizeParameter.DbType = DbType.String;
                    reqSizeParameter.Size = 100;
                    if (reqSize != null)
                    {
                        reqSizeParameter.Value = reqSize;
                    }
                    else
                    {
                        reqSizeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(reqSizeParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            CwAccountQuerySpResult row = new CwAccountQuerySpResult();
                            if (fieldNames.Contains("orderDesc") && !reader.IsDBNull(reader.GetOrdinal("orderDesc")))
                                row.OrderDesc = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"orderDesc")), typeof(string));
                            else
                                row.OrderDesc = null;

                            if (fieldNames.Contains("DatePaidPlatform") && !reader.IsDBNull(reader.GetOrdinal("DatePaidPlatform")))
                                row.DatePaidPlatform = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"DatePaidPlatform")), typeof(System.DateTime));
                            else
                                row.DatePaidPlatform = null;

                            if (fieldNames.Contains("FkType") && !reader.IsDBNull(reader.GetOrdinal("FkType")))
                                row.FkType = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FkType")), typeof(string));

                            if (fieldNames.Contains("DateWarehouseShipping") && !reader.IsDBNull(reader.GetOrdinal("DateWarehouseShipping")))
                                row.DateWarehouseShipping = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"DateWarehouseShipping")), typeof(System.DateTime));
                            else
                                row.DateWarehouseShipping = null;

                            if (fieldNames.Contains("status") && !reader.IsDBNull(reader.GetOrdinal("status")))
                                row.Status = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"status")), typeof(string));
                            else
                                row.Status = null;

                            if (fieldNames.Contains("saleOrderCode") && !reader.IsDBNull(reader.GetOrdinal("saleOrderCode")))
                                row.SaleOrderCode = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"saleOrderCode")), typeof(string));
                            else
                                row.SaleOrderCode = null;

                            if (fieldNames.Contains("refNo") && !reader.IsDBNull(reader.GetOrdinal("refNo")))
                                row.RefNo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"refNo")), typeof(string));
                            else
                                row.RefNo = null;

                            if (fieldNames.Contains("warehouseOrderCode") && !reader.IsDBNull(reader.GetOrdinal("warehouseOrderCode")))
                                row.WarehouseOrderCode = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warehouseOrderCode")), typeof(string));
                            else
                                row.WarehouseOrderCode = null;

                            if (fieldNames.Contains("orderType") && !reader.IsDBNull(reader.GetOrdinal("orderType")))
                                row.OrderType = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"orderType")), typeof(string));
                            else
                                row.OrderType = null;

                            if (fieldNames.Contains("country_name") && !reader.IsDBNull(reader.GetOrdinal("country_name")))
                                row.CountryName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"country_name")), typeof(string));
                            else
                                row.CountryName = null;

                            if (fieldNames.Contains("warehousedesc") && !reader.IsDBNull(reader.GetOrdinal("warehousedesc")))
                                row.Warehousedesc = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warehousedesc")), typeof(string));
                            else
                                row.Warehousedesc = null;

                            if (fieldNames.Contains("ProductSku") && !reader.IsDBNull(reader.GetOrdinal("ProductSku")))
                                row.ProductSku = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ProductSku")), typeof(string));
                            else
                                row.ProductSku = null;

                            if (fieldNames.Contains("AmazonSKU") && !reader.IsDBNull(reader.GetOrdinal("AmazonSKU")))
                                row.AmazonSKU = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"AmazonSKU")), typeof(string));
                            else
                                row.AmazonSKU = null;

                            if (fieldNames.Contains("SpUnitPrice") && !reader.IsDBNull(reader.GetOrdinal("SpUnitPrice")))
                                row.SpUnitPrice = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"SpUnitPrice")), typeof(string));

                            if (fieldNames.Contains("ZSpUnitPrice") && !reader.IsDBNull(reader.GetOrdinal("ZSpUnitPrice")))
                                row.ZSpUnitPrice = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ZSpUnitPrice")), typeof(decimal));

                            if (fieldNames.Contains("DhCost") && !reader.IsDBNull(reader.GetOrdinal("DhCost")))
                                row.DhCost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"DhCost")), typeof(decimal));

                            if (fieldNames.Contains("productNetWeight") && !reader.IsDBNull(reader.GetOrdinal("productNetWeight")))
                                row.ProductNetWeight = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"productNetWeight")), typeof(decimal));

                            if (fieldNames.Contains("ZproductNetWeight") && !reader.IsDBNull(reader.GetOrdinal("ZproductNetWeight")))
                                row.ZproductNetWeight = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ZproductNetWeight")), typeof(decimal));
                            else
                                row.ZproductNetWeight = null;

                            if (fieldNames.Contains("Qty") && !reader.IsDBNull(reader.GetOrdinal("Qty")))
                                row.Qty = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Qty")), typeof(int));
                            else
                                row.Qty = null;

                            if (fieldNames.Contains("Company") && !reader.IsDBNull(reader.GetOrdinal("Company")))
                                row.Company = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Company")), typeof(string));
                            else
                                row.Company = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public void GetHeadgearDensitySp (string startDate, string endDate)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetHeadgearDensity_sp";

                    DbParameter startDateParameter = cmd.CreateParameter();
                    startDateParameter.ParameterName = "startDate";
                    startDateParameter.Direction = ParameterDirection.Input;
                    startDateParameter.DbType = DbType.String;
                    startDateParameter.Size = 255;
                    if (startDate != null)
                    {
                        startDateParameter.Value = startDate;
                    }
                    else
                    {
                        startDateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(startDateParameter);

                    DbParameter endDateParameter = cmd.CreateParameter();
                    endDateParameter.ParameterName = "endDate";
                    endDateParameter.Direction = ParameterDirection.Input;
                    endDateParameter.DbType = DbType.String;
                    endDateParameter.Size = 255;
                    if (endDate != null)
                    {
                        endDateParameter.Value = endDate;
                    }
                    else
                    {
                        endDateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(endDateParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task GetHeadgearDensitySpAsync (string startDate, string endDate)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetHeadgearDensity_sp";

                    DbParameter startDateParameter = cmd.CreateParameter();
                    startDateParameter.ParameterName = "startDate";
                    startDateParameter.Direction = ParameterDirection.Input;
                    startDateParameter.DbType = DbType.String;
                    startDateParameter.Size = 255;
                    if (startDate != null)
                    {
                        startDateParameter.Value = startDate;
                    }
                    else
                    {
                        startDateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(startDateParameter);

                    DbParameter endDateParameter = cmd.CreateParameter();
                    endDateParameter.ParameterName = "endDate";
                    endDateParameter.Direction = ParameterDirection.Input;
                    endDateParameter.DbType = DbType.String;
                    endDateParameter.Size = 255;
                    if (endDate != null)
                    {
                        endDateParameter.Value = endDate;
                    }
                    else
                    {
                        endDateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(endDateParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public void GetOrderDetail (string startDate, string endDate, string type)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetOrderDetail";

                    DbParameter startDateParameter = cmd.CreateParameter();
                    startDateParameter.ParameterName = "startDate";
                    startDateParameter.Direction = ParameterDirection.Input;
                    startDateParameter.DbType = DbType.String;
                    startDateParameter.Size = 255;
                    if (startDate != null)
                    {
                        startDateParameter.Value = startDate;
                    }
                    else
                    {
                        startDateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(startDateParameter);

                    DbParameter endDateParameter = cmd.CreateParameter();
                    endDateParameter.ParameterName = "endDate";
                    endDateParameter.Direction = ParameterDirection.Input;
                    endDateParameter.DbType = DbType.String;
                    endDateParameter.Size = 255;
                    if (endDate != null)
                    {
                        endDateParameter.Value = endDate;
                    }
                    else
                    {
                        endDateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(endDateParameter);

                    DbParameter typeParameter = cmd.CreateParameter();
                    typeParameter.ParameterName = "type";
                    typeParameter.Direction = ParameterDirection.Input;
                    typeParameter.DbType = DbType.String;
                    typeParameter.Size = 255;
                    if (type != null)
                    {
                        typeParameter.Value = type;
                    }
                    else
                    {
                        typeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(typeParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task GetOrderDetailAsync (string startDate, string endDate, string type)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetOrderDetail";

                    DbParameter startDateParameter = cmd.CreateParameter();
                    startDateParameter.ParameterName = "startDate";
                    startDateParameter.Direction = ParameterDirection.Input;
                    startDateParameter.DbType = DbType.String;
                    startDateParameter.Size = 255;
                    if (startDate != null)
                    {
                        startDateParameter.Value = startDate;
                    }
                    else
                    {
                        startDateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(startDateParameter);

                    DbParameter endDateParameter = cmd.CreateParameter();
                    endDateParameter.ParameterName = "endDate";
                    endDateParameter.Direction = ParameterDirection.Input;
                    endDateParameter.DbType = DbType.String;
                    endDateParameter.Size = 255;
                    if (endDate != null)
                    {
                        endDateParameter.Value = endDate;
                    }
                    else
                    {
                        endDateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(endDateParameter);

                    DbParameter typeParameter = cmd.CreateParameter();
                    typeParameter.ParameterName = "type";
                    typeParameter.Direction = ParameterDirection.Input;
                    typeParameter.DbType = DbType.String;
                    typeParameter.Size = 255;
                    if (type != null)
                    {
                        typeParameter.Value = type;
                    }
                    else
                    {
                        typeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(typeParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public void GetWavingBlockSp (string startDate, string endDate, string type)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetWavingBlock_sp";

                    DbParameter startDateParameter = cmd.CreateParameter();
                    startDateParameter.ParameterName = "startDate";
                    startDateParameter.Direction = ParameterDirection.Input;
                    startDateParameter.DbType = DbType.String;
                    startDateParameter.Size = 255;
                    if (startDate != null)
                    {
                        startDateParameter.Value = startDate;
                    }
                    else
                    {
                        startDateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(startDateParameter);

                    DbParameter endDateParameter = cmd.CreateParameter();
                    endDateParameter.ParameterName = "endDate";
                    endDateParameter.Direction = ParameterDirection.Input;
                    endDateParameter.DbType = DbType.String;
                    endDateParameter.Size = 255;
                    if (endDate != null)
                    {
                        endDateParameter.Value = endDate;
                    }
                    else
                    {
                        endDateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(endDateParameter);

                    DbParameter typeParameter = cmd.CreateParameter();
                    typeParameter.ParameterName = "type";
                    typeParameter.Direction = ParameterDirection.Input;
                    typeParameter.DbType = DbType.String;
                    typeParameter.Size = 255;
                    if (type != null)
                    {
                        typeParameter.Value = type;
                    }
                    else
                    {
                        typeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(typeParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task GetWavingBlockSpAsync (string startDate, string endDate, string type)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.GetWavingBlock_sp";

                    DbParameter startDateParameter = cmd.CreateParameter();
                    startDateParameter.ParameterName = "startDate";
                    startDateParameter.Direction = ParameterDirection.Input;
                    startDateParameter.DbType = DbType.String;
                    startDateParameter.Size = 255;
                    if (startDate != null)
                    {
                        startDateParameter.Value = startDate;
                    }
                    else
                    {
                        startDateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(startDateParameter);

                    DbParameter endDateParameter = cmd.CreateParameter();
                    endDateParameter.ParameterName = "endDate";
                    endDateParameter.Direction = ParameterDirection.Input;
                    endDateParameter.DbType = DbType.String;
                    endDateParameter.Size = 255;
                    if (endDate != null)
                    {
                        endDateParameter.Value = endDate;
                    }
                    else
                    {
                        endDateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(endDateParameter);

                    DbParameter typeParameter = cmd.CreateParameter();
                    typeParameter.ParameterName = "type";
                    typeParameter.Direction = ParameterDirection.Input;
                    typeParameter.DbType = DbType.String;
                    typeParameter.Size = 255;
                    if (type != null)
                    {
                        typeParameter.Value = type;
                    }
                    else
                    {
                        typeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(typeParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public void HairWeftStyleSaleSp (System.DateTime? Sdate, System.DateTime? Edate)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.HairWeftStyleSale_sp";

                    DbParameter SdateParameter = cmd.CreateParameter();
                    SdateParameter.ParameterName = "Sdate";
                    SdateParameter.Direction = ParameterDirection.Input;
                    SdateParameter.DbType = DbType.DateTime;
                    if (Sdate.HasValue)
                    {
                        SdateParameter.Value = Sdate.Value;
                    }
                    else
                    {
                        SdateParameter.Size = -1;
                        SdateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SdateParameter);

                    DbParameter EdateParameter = cmd.CreateParameter();
                    EdateParameter.ParameterName = "Edate";
                    EdateParameter.Direction = ParameterDirection.Input;
                    EdateParameter.DbType = DbType.DateTime;
                    if (Edate.HasValue)
                    {
                        EdateParameter.Value = Edate.Value;
                    }
                    else
                    {
                        EdateParameter.Size = -1;
                        EdateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EdateParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task HairWeftStyleSaleSpAsync (System.DateTime? Sdate, System.DateTime? Edate)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.HairWeftStyleSale_sp";

                    DbParameter SdateParameter = cmd.CreateParameter();
                    SdateParameter.ParameterName = "Sdate";
                    SdateParameter.Direction = ParameterDirection.Input;
                    SdateParameter.DbType = DbType.DateTime;
                    if (Sdate.HasValue)
                    {
                        SdateParameter.Value = Sdate.Value;
                    }
                    else
                    {
                        SdateParameter.Size = -1;
                        SdateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SdateParameter);

                    DbParameter EdateParameter = cmd.CreateParameter();
                    EdateParameter.ParameterName = "Edate";
                    EdateParameter.Direction = ParameterDirection.Input;
                    EdateParameter.DbType = DbType.DateTime;
                    if (Edate.HasValue)
                    {
                        EdateParameter.Value = Edate.Value;
                    }
                    else
                    {
                        EdateParameter.Size = -1;
                        EdateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EdateParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public void OddMinusSaleSp (System.DateTime? Sdate, System.DateTime? Edate)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OddMinusSale_sp";

                    DbParameter SdateParameter = cmd.CreateParameter();
                    SdateParameter.ParameterName = "Sdate";
                    SdateParameter.Direction = ParameterDirection.Input;
                    SdateParameter.DbType = DbType.DateTime;
                    if (Sdate.HasValue)
                    {
                        SdateParameter.Value = Sdate.Value;
                    }
                    else
                    {
                        SdateParameter.Size = -1;
                        SdateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SdateParameter);

                    DbParameter EdateParameter = cmd.CreateParameter();
                    EdateParameter.ParameterName = "Edate";
                    EdateParameter.Direction = ParameterDirection.Input;
                    EdateParameter.DbType = DbType.DateTime;
                    if (Edate.HasValue)
                    {
                        EdateParameter.Value = Edate.Value;
                    }
                    else
                    {
                        EdateParameter.Size = -1;
                        EdateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EdateParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task OddMinusSaleSpAsync (System.DateTime? Sdate, System.DateTime? Edate)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.OddMinusSale_sp";

                    DbParameter SdateParameter = cmd.CreateParameter();
                    SdateParameter.ParameterName = "Sdate";
                    SdateParameter.Direction = ParameterDirection.Input;
                    SdateParameter.DbType = DbType.DateTime;
                    if (Sdate.HasValue)
                    {
                        SdateParameter.Value = Sdate.Value;
                    }
                    else
                    {
                        SdateParameter.Size = -1;
                        SdateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SdateParameter);

                    DbParameter EdateParameter = cmd.CreateParameter();
                    EdateParameter.ParameterName = "Edate";
                    EdateParameter.Direction = ParameterDirection.Input;
                    EdateParameter.DbType = DbType.DateTime;
                    if (Edate.HasValue)
                    {
                        EdateParameter.Value = Edate.Value;
                    }
                    else
                    {
                        EdateParameter.Size = -1;
                        EdateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EdateParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public void PlateformLevelSp (System.DateTime? Sdate, System.DateTime? Edate, string SaleType)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.PlateformLevel_Sp";

                    DbParameter SdateParameter = cmd.CreateParameter();
                    SdateParameter.ParameterName = "Sdate";
                    SdateParameter.Direction = ParameterDirection.Input;
                    SdateParameter.DbType = DbType.DateTime;
                    if (Sdate.HasValue)
                    {
                        SdateParameter.Value = Sdate.Value;
                    }
                    else
                    {
                        SdateParameter.Size = -1;
                        SdateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SdateParameter);

                    DbParameter EdateParameter = cmd.CreateParameter();
                    EdateParameter.ParameterName = "Edate";
                    EdateParameter.Direction = ParameterDirection.Input;
                    EdateParameter.DbType = DbType.DateTime;
                    if (Edate.HasValue)
                    {
                        EdateParameter.Value = Edate.Value;
                    }
                    else
                    {
                        EdateParameter.Size = -1;
                        EdateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EdateParameter);

                    DbParameter SaleTypeParameter = cmd.CreateParameter();
                    SaleTypeParameter.ParameterName = "SaleType";
                    SaleTypeParameter.Direction = ParameterDirection.Input;
                    SaleTypeParameter.DbType = DbType.String;
                    SaleTypeParameter.Size = 20;
                    if (SaleType != null)
                    {
                        SaleTypeParameter.Value = SaleType;
                    }
                    else
                    {
                        SaleTypeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SaleTypeParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task PlateformLevelSpAsync (System.DateTime? Sdate, System.DateTime? Edate, string SaleType)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.PlateformLevel_Sp";

                    DbParameter SdateParameter = cmd.CreateParameter();
                    SdateParameter.ParameterName = "Sdate";
                    SdateParameter.Direction = ParameterDirection.Input;
                    SdateParameter.DbType = DbType.DateTime;
                    if (Sdate.HasValue)
                    {
                        SdateParameter.Value = Sdate.Value;
                    }
                    else
                    {
                        SdateParameter.Size = -1;
                        SdateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SdateParameter);

                    DbParameter EdateParameter = cmd.CreateParameter();
                    EdateParameter.ParameterName = "Edate";
                    EdateParameter.Direction = ParameterDirection.Input;
                    EdateParameter.DbType = DbType.DateTime;
                    if (Edate.HasValue)
                    {
                        EdateParameter.Value = Edate.Value;
                    }
                    else
                    {
                        EdateParameter.Size = -1;
                        EdateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EdateParameter);

                    DbParameter SaleTypeParameter = cmd.CreateParameter();
                    SaleTypeParameter.ParameterName = "SaleType";
                    SaleTypeParameter.Direction = ParameterDirection.Input;
                    SaleTypeParameter.DbType = DbType.String;
                    SaleTypeParameter.Size = 20;
                    if (SaleType != null)
                    {
                        SaleTypeParameter.Value = SaleType;
                    }
                    else
                    {
                        SaleTypeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SaleTypeParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public void RefreshProcessedSkuRelation ()
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.RefreshProcessedSkuRelation";
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task RefreshProcessedSkuRelationAsync ()
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.RefreshProcessedSkuRelation";
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public void TotalSaleSp (System.DateTime? Sdate, System.DateTime? Edate)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.TotalSale_sp";

                    DbParameter SdateParameter = cmd.CreateParameter();
                    SdateParameter.ParameterName = "Sdate";
                    SdateParameter.Direction = ParameterDirection.Input;
                    SdateParameter.DbType = DbType.DateTime;
                    if (Sdate.HasValue)
                    {
                        SdateParameter.Value = Sdate.Value;
                    }
                    else
                    {
                        SdateParameter.Size = -1;
                        SdateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SdateParameter);

                    DbParameter EdateParameter = cmd.CreateParameter();
                    EdateParameter.ParameterName = "Edate";
                    EdateParameter.Direction = ParameterDirection.Input;
                    EdateParameter.DbType = DbType.DateTime;
                    if (Edate.HasValue)
                    {
                        EdateParameter.Value = Edate.Value;
                    }
                    else
                    {
                        EdateParameter.Size = -1;
                        EdateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EdateParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task TotalSaleSpAsync (System.DateTime? Sdate, System.DateTime? Edate)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"dbo.TotalSale_sp";

                    DbParameter SdateParameter = cmd.CreateParameter();
                    SdateParameter.ParameterName = "Sdate";
                    SdateParameter.Direction = ParameterDirection.Input;
                    SdateParameter.DbType = DbType.DateTime;
                    if (Sdate.HasValue)
                    {
                        SdateParameter.Value = Sdate.Value;
                    }
                    else
                    {
                        SdateParameter.Size = -1;
                        SdateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SdateParameter);

                    DbParameter EdateParameter = cmd.CreateParameter();
                    EdateParameter.ParameterName = "Edate";
                    EdateParameter.Direction = ParameterDirection.Input;
                    EdateParameter.DbType = DbType.DateTime;
                    if (Edate.HasValue)
                    {
                        EdateParameter.Value = Edate.Value;
                    }
                    else
                    {
                        EdateParameter.Size = -1;
                        EdateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(EdateParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public List<GetInStrResult> GetInStr (string SourceStr)
        {

            List<GetInStrResult> result = new List<GetInStrResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = @"select * from dbo.GetInStr(@SourceStr)";

                    DbParameter SourceStrParameter = cmd.CreateParameter();
                    SourceStrParameter.ParameterName = "SourceStr";
                    SourceStrParameter.Direction = ParameterDirection.Input;
                    SourceStrParameter.DbType = DbType.String;
                    SourceStrParameter.Size = 8000;
                    if (SourceStr != null)
                    {
                        SourceStrParameter.Value = SourceStr;
                    }
                    else
                    {
                        SourceStrParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SourceStrParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetInStrResult row = new GetInStrResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.List = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("list") && !reader.IsDBNull(reader.GetOrdinal("list")))
                                row.List = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"list")), typeof(string));
                            else
                                row.List = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<GetInStrResult>> GetInStrAsync (string SourceStr)
        {

            List<GetInStrResult> result = new List<GetInStrResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }
            
            try 
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.Text;
                    cmd.CommandText = @"select * from dbo.GetInStr(@SourceStr)";

                    DbParameter SourceStrParameter = cmd.CreateParameter();
                    SourceStrParameter.ParameterName = "SourceStr";
                    SourceStrParameter.Direction = ParameterDirection.Input;
                    SourceStrParameter.DbType = DbType.String;
                    SourceStrParameter.Size = 8000;
                    if (SourceStr != null)
                    {
                        SourceStrParameter.Value = SourceStr;
                    }
                    else
                    {
                        SourceStrParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(SourceStrParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            GetInStrResult row = new GetInStrResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.List = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("list") && !reader.IsDBNull(reader.GetOrdinal("list")))
                                row.List = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"list")), typeof(string));
                            else
                                row.List = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        #endregion

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            this.ResDepartmentMapping(modelBuilder);
            this.CustomizeResDepartmentMapping(modelBuilder);

            this.ResRoleMapping(modelBuilder);
            this.CustomizeResRoleMapping(modelBuilder);

            this.ResResourceMapping(modelBuilder);
            this.CustomizeResResourceMapping(modelBuilder);

            this.ResPermissionMapping(modelBuilder);
            this.CustomizeResPermissionMapping(modelBuilder);

            this.ResUserMapping(modelBuilder);
            this.CustomizeResUserMapping(modelBuilder);

            this.ResUserRoleMapping(modelBuilder);
            this.CustomizeResUserRoleMapping(modelBuilder);

            this.ResRolePermissionMapping(modelBuilder);
            this.CustomizeResRolePermissionMapping(modelBuilder);

            this.ResUserPermissionMapping(modelBuilder);
            this.CustomizeResUserPermissionMapping(modelBuilder);

            this.ResAutoCodeMapping(modelBuilder);
            this.CustomizeResAutoCodeMapping(modelBuilder);

            this.ResScheduleMapping(modelBuilder);
            this.CustomizeResScheduleMapping(modelBuilder);

            this.ResOperateLogMapping(modelBuilder);
            this.CustomizeResOperateLogMapping(modelBuilder);

            this.ECOrderConfigDataMapping(modelBuilder);
            this.CustomizeECOrderConfigDataMapping(modelBuilder);

            this.ECProductMapping(modelBuilder);
            this.CustomizeECProductMapping(modelBuilder);

            this.ECProductBoxMapping(modelBuilder);
            this.CustomizeECProductBoxMapping(modelBuilder);

            this.ECProductCombinationMapping(modelBuilder);
            this.CustomizeECProductCombinationMapping(modelBuilder);

            this.ECProductCustomCategoryMapping(modelBuilder);
            this.CustomizeECProductCustomCategoryMapping(modelBuilder);

            this.ECProductPropertyMapping(modelBuilder);
            this.CustomizeECProductPropertyMapping(modelBuilder);

            this.ECSalesOrderMapping(modelBuilder);
            this.CustomizeECSalesOrderMapping(modelBuilder);

            this.ECSalesOrderAddressMapping(modelBuilder);
            this.CustomizeECSalesOrderAddressMapping(modelBuilder);

            this.ECSubProductMapping(modelBuilder);
            this.CustomizeECSubProductMapping(modelBuilder);

            this.ECWarehouseMapping(modelBuilder);
            this.CustomizeECWarehouseMapping(modelBuilder);

            this.ECSalesOrderDetailMapping(modelBuilder);
            this.CustomizeECSalesOrderDetailMapping(modelBuilder);

            this.ECReceivingDetailMapping(modelBuilder);
            this.CustomizeECReceivingDetailMapping(modelBuilder);

            this.ECDeliveryDetailMapping(modelBuilder);
            this.CustomizeECDeliveryDetailMapping(modelBuilder);

            this.ECRMARefundMapping(modelBuilder);
            this.CustomizeECRMARefundMapping(modelBuilder);

            this.ECSkuRelationMapping(modelBuilder);
            this.CustomizeECSkuRelationMapping(modelBuilder);

            this.ECSkuRelationItemMapping(modelBuilder);
            this.CustomizeECSkuRelationItemMapping(modelBuilder);

            this.BnsOmsReceivingCodeRecordMapping(modelBuilder);
            this.CustomizeBnsOmsReceivingCodeRecordMapping(modelBuilder);

            this.ECAsnMapping(modelBuilder);
            this.CustomizeECAsnMapping(modelBuilder);

            this.ECAsnItemMapping(modelBuilder);
            this.CustomizeECAsnItemMapping(modelBuilder);

            this.ECAsnCostMapping(modelBuilder);
            this.CustomizeECAsnCostMapping(modelBuilder);

            this.ECAsnWarehouseAttrMapping(modelBuilder);
            this.CustomizeECAsnWarehouseAttrMapping(modelBuilder);

            this.ECAsnProductCostMapping(modelBuilder);
            this.CustomizeECAsnProductCostMapping(modelBuilder);

            this.BnsUsBaseInventoryMapping(modelBuilder);
            this.CustomizeBnsUsBaseInventoryMapping(modelBuilder);

            this.ECShipBatchMapping(modelBuilder);
            this.CustomizeECShipBatchMapping(modelBuilder);

            this.ECShipBatchPackingInfoMapping(modelBuilder);
            this.CustomizeECShipBatchPackingInfoMapping(modelBuilder);

            this.ECShipBatchProductInfoMapping(modelBuilder);
            this.CustomizeECShipBatchProductInfoMapping(modelBuilder);

            this.ECFbaBoxDetailMapping(modelBuilder);
            this.CustomizeECFbaBoxDetailMapping(modelBuilder);

            this.ECFbaFinalBoxMapping(modelBuilder);
            this.CustomizeECFbaFinalBoxMapping(modelBuilder);

            this.ECFbaLogMapping(modelBuilder);
            this.CustomizeECFbaLogMapping(modelBuilder);

            this.ECFbaOmsBoxMapping(modelBuilder);
            this.CustomizeECFbaOmsBoxMapping(modelBuilder);

            this.ECFbaOrderMapping(modelBuilder);
            this.CustomizeECFbaOrderMapping(modelBuilder);

            this.ECFbaPackBoxMapping(modelBuilder);
            this.CustomizeECFbaPackBoxMapping(modelBuilder);

            this.ECFbaPackDetailMapping(modelBuilder);
            this.CustomizeECFbaPackDetailMapping(modelBuilder);

            this.ECFbaQueryOrderMapping(modelBuilder);
            this.CustomizeECFbaQueryOrderMapping(modelBuilder);

            this.ECFbaTransitBoxMapping(modelBuilder);
            this.CustomizeECFbaTransitBoxMapping(modelBuilder);

            this.ECFbaBoxMapping(modelBuilder);
            this.CustomizeECFbaBoxMapping(modelBuilder);

            this.ECProcessedSkuRelationItemMapping(modelBuilder);
            this.CustomizeECProcessedSkuRelationItemMapping(modelBuilder);

            this.ECProcessedSkuRelationMapping(modelBuilder);
            this.CustomizeECProcessedSkuRelationMapping(modelBuilder);

            this.ResMenuMapping(modelBuilder);
            this.CustomizeResMenuMapping(modelBuilder);

            this.ECCountryMapping(modelBuilder);
            this.CustomizeECCountryMapping(modelBuilder);

            this.BnsAmazonInstanceMapping(modelBuilder);
            this.CustomizeBnsAmazonInstanceMapping(modelBuilder);

            this.BnsAmazonReportMapping(modelBuilder);
            this.CustomizeBnsAmazonReportMapping(modelBuilder);

            this.BnsAmazonReportDetailMapping(modelBuilder);
            this.CustomizeBnsAmazonReportDetailMapping(modelBuilder);

            this.BnsPaypalInstanceMapping(modelBuilder);
            this.CustomizeBnsPaypalInstanceMapping(modelBuilder);

            this.BnsPaypalTransactionDetailMapping(modelBuilder);
            this.CustomizeBnsPaypalTransactionDetailMapping(modelBuilder);

            this.BnsPaypalTransactionDetailsCartInfoMapping(modelBuilder);
            this.CustomizeBnsPaypalTransactionDetailsCartInfoMapping(modelBuilder);

            this.BnsSendDeliverdToEcMapping(modelBuilder);
            this.CustomizeBnsSendDeliverdToEcMapping(modelBuilder);

            this.BnsShippingEcToTrackingMoreMapping(modelBuilder);
            this.CustomizeBnsShippingEcToTrackingMoreMapping(modelBuilder);

            this.ECAliexpressLoaninfoMapping(modelBuilder);
            this.CustomizeECAliexpressLoaninfoMapping(modelBuilder);

            this.ECDHCostMapping(modelBuilder);
            this.CustomizeECDHCostMapping(modelBuilder);

            this.ECRepeatCustMapping(modelBuilder);
            this.CustomizeECRepeatCustMapping(modelBuilder);

            this.ECShippingMethodMapping(modelBuilder);
            this.CustomizeECShippingMethodMapping(modelBuilder);

            this.ECUserMapping(modelBuilder);
            this.CustomizeECUserMapping(modelBuilder);

            this.ECOrderInfoMapping(modelBuilder);
            this.CustomizeECOrderInfoMapping(modelBuilder);

            this.ECOrderInfoBarcodeMapping(modelBuilder);
            this.CustomizeECOrderInfoBarcodeMapping(modelBuilder);

            this.ECOrderInfoOdaTypeArrMapping(modelBuilder);
            this.CustomizeECOrderInfoOdaTypeArrMapping(modelBuilder);

            this.ECOrderInfoOpNodeMapping(modelBuilder);
            this.CustomizeECOrderInfoOpNodeMapping(modelBuilder);

            this.ECOrderInfoOrderMapping(modelBuilder);
            this.CustomizeECOrderInfoOrderMapping(modelBuilder);

            this.ECOrderInfoOrderLogMapping(modelBuilder);
            this.CustomizeECOrderInfoOrderLogMapping(modelBuilder);

            this.ECOrderInfoProductMapping(modelBuilder);
            this.CustomizeECOrderInfoProductMapping(modelBuilder);

            this.ECOrderInfoShipMapping(modelBuilder);
            this.CustomizeECOrderInfoShipMapping(modelBuilder);

            this.ECOrderInfoOrderStatuMapping(modelBuilder);
            this.CustomizeECOrderInfoOrderStatuMapping(modelBuilder);

            this.ECOrderInfoAddrCountryMapping(modelBuilder);
            this.CustomizeECOrderInfoAddrCountryMapping(modelBuilder);

            this.ECOrderInfoAdressMapping(modelBuilder);
            this.CustomizeECOrderInfoAdressMapping(modelBuilder);

            this.ECOrderInfoPackageInfoMapping(modelBuilder);
            this.CustomizeECOrderInfoPackageInfoMapping(modelBuilder);

            this.ECOrderInfoPackageListMapping(modelBuilder);
            this.CustomizeECOrderInfoPackageListMapping(modelBuilder);

            this.ECRmaRefaMapping(modelBuilder);
            this.CustomizeECRmaRefaMapping(modelBuilder);

            this.BnsMgSalesChildOrderMapping(modelBuilder);
            this.CustomizeBnsMgSalesChildOrderMapping(modelBuilder);

            this.VirtuleMappingCreate(modelBuilder);            

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region ResDepartment Mapping

        private void ResDepartmentMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ResDepartment>().ToTable(@"Res_Department");
            modelBuilder.Entity<ResDepartment>().Property<int>(@"Id").HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ResDepartment>().Property<string>(x => x.DeptCode).HasColumnName(@"DeptCode").IsRequired().ValueGeneratedNever().HasMaxLength(20);
            modelBuilder.Entity<ResDepartment>().Property<string>(x => x.DeptName).HasColumnName(@"DeptName").IsRequired().ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ResDepartment>().Property<string>(x => x.Remark).HasColumnName(@"Remark").IsRequired().ValueGeneratedNever().HasMaxLength(512);
            modelBuilder.Entity<ResDepartment>().Property<int?>(x => x.ParentId).HasColumnName(@"ParentId").ValueGeneratedNever();
            modelBuilder.Entity<ResDepartment>().Property<int>(@"CreateUid").HasColumnName(@"CreateUid").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResDepartment>().Property<System.DateTime>(@"CreateDate").HasColumnName(@"CreateDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResDepartment>().Property<bool>(@"StopFlag").HasColumnName(@"StopFlag").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResDepartment>().Property<int>(@"WriteUid").HasColumnName(@"WriteUid").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResDepartment>().Property<System.DateTime>(@"WriteDate").HasColumnName(@"WriteDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResDepartment>().HasKey(@"Id");
        }

        partial void CustomizeResDepartmentMapping(ModelBuilder modelBuilder);

        #endregion

        #region ResRole Mapping

        private void ResRoleMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ResRole>().ToTable(@"Res_Role");
            modelBuilder.Entity<ResRole>().Property<int>(@"Id").HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ResRole>().Property<string>(x => x.RoleCode).HasColumnName(@"RoleCode").IsRequired().ValueGeneratedNever().HasMaxLength(20);
            modelBuilder.Entity<ResRole>().Property<string>(x => x.RoleName).HasColumnName(@"RoleName").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ResRole>().Property<string>(x => x.Remark).HasColumnName(@"Remark").IsRequired().ValueGeneratedNever().HasMaxLength(512);
            modelBuilder.Entity<ResRole>().Property<System.DateTime>(@"CreateDate").HasColumnName(@"CreateDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResRole>().Property<int>(@"CreateUid").HasColumnName(@"CreateUid").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResRole>().Property<int>(@"WriteUid").HasColumnName(@"WriteUid").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResRole>().Property<System.DateTime>(@"WriteDate").HasColumnName(@"WriteDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResRole>().Property<bool>(@"StopFlag").HasColumnName(@"StopFlag").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"false");
            modelBuilder.Entity<ResRole>().HasKey(@"Id");
        }

        partial void CustomizeResRoleMapping(ModelBuilder modelBuilder);

        #endregion

        #region ResResource Mapping

        private void ResResourceMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ResResource>().ToTable(@"Res_Resource");
            modelBuilder.Entity<ResResource>().Property<int>(@"Id").HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ResResource>().Property<string>(x => x.TypeName).HasColumnName(@"TypeName").ValueGeneratedNever();
            modelBuilder.Entity<ResResource>().Property<string>(x => x.ResourceCode).HasColumnName(@"ResourceCode").IsRequired().ValueGeneratedNever().HasMaxLength(20);
            modelBuilder.Entity<ResResource>().Property<string>(x => x.EnName).HasColumnName(@"EnName").IsRequired().ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ResResource>().Property<string>(x => x.CnName).HasColumnName(@"CnName").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<ResResource>().Property<System.DateTime>(@"WriteDate").HasColumnName(@"WriteDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResResource>().Property<System.DateTime>(@"CreateDate").HasColumnName(@"CreateDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResResource>().Property<int>(x => x.WriteUid).HasColumnName(@"WriteUid").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResResource>().Property<int>(@"CreateUid").HasColumnName(@"CreateUid").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResResource>().Property<bool>(@"StopFlag").HasColumnName(@"StopFlag").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"false");
            modelBuilder.Entity<ResResource>().HasKey(@"Id");
            modelBuilder.Entity<ResResource>().HasIndex(@"TypeName").IsUnique(true);
            modelBuilder.Entity<ResResource>().HasIndex(@"ResourceCode").IsUnique(true);
        }

        partial void CustomizeResResourceMapping(ModelBuilder modelBuilder);

        #endregion

        #region ResPermission Mapping

        private void ResPermissionMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ResPermission>().ToTable(@"Res_Permission");
            modelBuilder.Entity<ResPermission>().Property<int>(@"Id").HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ResPermission>().Property<int>(@"CreateUid").HasColumnName(@"CreateUid").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResPermission>().Property<System.DateTime>(@"CreateDate").HasColumnName(@"CreateDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResPermission>().Property<int>(@"WriteUid").HasColumnName(@"WriteUid").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResPermission>().Property<System.DateTime>(@"WriteDate").HasColumnName(@"WriteDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResPermission>().Property<bool>(@"StopFlag").HasColumnName(@"StopFlag").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"0");
            modelBuilder.Entity<ResPermission>().Property<int>(x => x.ResResourceId).HasColumnName(@"ResResourceId").ValueGeneratedNever();
            modelBuilder.Entity<ResPermission>().Property<string>(x => x.PermissionCode).HasColumnName(@"PermissionCode").ValueGeneratedNever().HasMaxLength(20);
            modelBuilder.Entity<ResPermission>().Property<string>(x => x.EnName).HasColumnName(@"EnName").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ResPermission>().Property<string>(x => x.CnName).HasColumnName(@"CnName").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ResPermission>().HasKey(@"Id");
        }

        partial void CustomizeResPermissionMapping(ModelBuilder modelBuilder);

        #endregion

        #region ResUser Mapping

        private void ResUserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ResUser>().ToTable(@"Res_User");
            modelBuilder.Entity<ResUser>().Property<int>(@"Id").HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ResUser>().Property<System.DateTime>(@"WriteDate").HasColumnName(@"WriteDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResUser>().Property<System.DateTime>(@"CreateDate").HasColumnName(@"CreateDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResUser>().Property<int>(@"WriteUid").HasColumnName(@"WriteUid").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResUser>().Property<int>(@"CreateUid").HasColumnName(@"CreateUid").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResUser>().Property<bool>(@"StopFlag").HasColumnName(@"StopFlag").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResUser>().Property<string>(x => x.UserName).HasColumnName(@"UserName").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ResUser>().Property<string>(x => x.UserCode).HasColumnName(@"UserCode").IsRequired().ValueGeneratedNever().HasMaxLength(20);
            modelBuilder.Entity<ResUser>().Property<string>(x => x.RealName).HasColumnName(@"RealName").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ResUser>().Property<string>(x => x.UserPwd).HasColumnName(@"UserPwd").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ResUser>().Property<int>(x => x.DeptId).HasColumnName(@"DeptId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResUser>().Property<bool>(x => x.AdminFlag).HasColumnName(@"AdminFlag").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResUser>().Property<string>(x => x.Phone).HasColumnName(@"Phone").IsRequired().ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ResUser>().Property<string>(x => x.Email).HasColumnName(@"Email").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ResUser>().Property<string>(x => x.Remark).HasColumnName(@"Remark").IsRequired().ValueGeneratedNever().HasMaxLength(512);
            modelBuilder.Entity<ResUser>().Property<string>(x => x.HeadUrl).HasColumnName(@"HeadUrl").IsRequired().ValueGeneratedNever().HasMaxLength(512);
            modelBuilder.Entity<ResUser>().Property<System.DateTime>(x => x.LoginDate).HasColumnName(@"LoginDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResUser>().Property<string>(x => x.Salt).HasColumnName(@"Salt").ValueGeneratedNever().HasMaxLength(20);
            modelBuilder.Entity<ResUser>().HasKey(@"Id");
        }

        partial void CustomizeResUserMapping(ModelBuilder modelBuilder);

        #endregion

        #region ResUserRole Mapping

        private void ResUserRoleMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ResUserRole>().ToTable(@"Res_UserRole");
            modelBuilder.Entity<ResUserRole>().Property<int>(@"Id").HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ResUserRole>().Property<int>(@"CreateUid").HasColumnName(@"CreateUid").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResUserRole>().Property<System.DateTime>(@"CreateDate").HasColumnName(@"CreateDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResUserRole>().Property<int>(@"WriteUid").HasColumnName(@"WriteUid").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResUserRole>().Property<System.DateTime>(@"WriteDate").HasColumnName(@"WriteDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResUserRole>().Property<int>(x => x.RoleId).HasColumnName(@"RoleId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResUserRole>().Property<int>(x => x.UserId).HasColumnName(@"UserId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResUserRole>().HasKey(@"Id");
        }

        partial void CustomizeResUserRoleMapping(ModelBuilder modelBuilder);

        #endregion

        #region ResRolePermission Mapping

        private void ResRolePermissionMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ResRolePermission>().ToTable(@"Res_RolePermission");
            modelBuilder.Entity<ResRolePermission>().Property<int>(@"Id").HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ResRolePermission>().Property<int>(@"CreateUid").HasColumnName(@"CreateUid").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResRolePermission>().Property<System.DateTime>(@"CreateDate").HasColumnName(@"CreateDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResRolePermission>().Property<int>(@"WriteUid").HasColumnName(@"WriteUid").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResRolePermission>().Property<System.DateTime>(@"WriteDate").HasColumnName(@"WriteDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResRolePermission>().Property<int>(x => x.RoleId).HasColumnName(@"RoleId").ValueGeneratedNever();
            modelBuilder.Entity<ResRolePermission>().Property<int>(x => x.PermissionId).HasColumnName(@"PermissionId").ValueGeneratedNever();
            modelBuilder.Entity<ResRolePermission>().HasKey(@"Id");
        }

        partial void CustomizeResRolePermissionMapping(ModelBuilder modelBuilder);

        #endregion

        #region ResUserPermission Mapping

        private void ResUserPermissionMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ResUserPermission>().ToTable(@"Res_UserPermission");
            modelBuilder.Entity<ResUserPermission>().Property<int>(@"Id").HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ResUserPermission>().Property<int>(@"CreateUid").HasColumnName(@"CreateUid").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResUserPermission>().Property<System.DateTime>(@"CreateDate").HasColumnName(@"CreateDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResUserPermission>().Property<int>(@"WriteUid").HasColumnName(@"WriteUid").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResUserPermission>().Property<System.DateTime>(@"WriteDate").HasColumnName(@"WriteDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResUserPermission>().Property<int>(x => x.UserId).HasColumnName(@"UserId").ValueGeneratedNever();
            modelBuilder.Entity<ResUserPermission>().Property<int>(x => x.PermissionId).HasColumnName(@"PermissionId").ValueGeneratedNever();
            modelBuilder.Entity<ResUserPermission>().HasKey(@"Id");
        }

        partial void CustomizeResUserPermissionMapping(ModelBuilder modelBuilder);

        #endregion

        #region ResAutoCode Mapping

        private void ResAutoCodeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ResAutoCode>().ToTable(@"Res_AutoCode");
            modelBuilder.Entity<ResAutoCode>().Property<int>(@"Id").HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ResAutoCode>().Property<int>(@"CreateUid").HasColumnName(@"CreateUid").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResAutoCode>().Property<System.DateTime>(@"CreateDate").HasColumnName(@"CreateDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResAutoCode>().Property<int>(@"WriteUid").HasColumnName(@"WriteUid").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResAutoCode>().Property<System.DateTime>(@"WriteDate").HasColumnName(@"WriteDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResAutoCode>().Property<bool>(@"StopFlag").HasColumnName(@"StopFlag").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResAutoCode>().Property<string>(x => x.FixHeader).HasColumnName(@"FixHeader").IsRequired().ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<ResAutoCode>().Property<int>(x => x.Current).HasColumnName(@"Current").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResAutoCode>().HasKey(@"Id");
            modelBuilder.Entity<ResAutoCode>().HasIndex(@"FixHeader").IsUnique(true).HasName(@"Res_AutoCode_FixHeader");
        }

        partial void CustomizeResAutoCodeMapping(ModelBuilder modelBuilder);

        #endregion

        #region ResSchedule Mapping

        private void ResScheduleMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ResSchedule>().ToTable(@"Res_Schedule");
            modelBuilder.Entity<ResSchedule>().Property<int>(@"Id").HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ResSchedule>().Property<int>(@"CreateUid").HasColumnName(@"CreateUid").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResSchedule>().Property<System.DateTime>(@"CreateDate").HasColumnName(@"CreateDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResSchedule>().Property<int>(@"WriteUid").HasColumnName(@"WriteUid").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResSchedule>().Property<System.DateTime>(@"WriteDate").HasColumnName(@"WriteDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResSchedule>().Property<bool>(@"StopFlag").HasColumnName(@"StopFlag").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"false");
            modelBuilder.Entity<ResSchedule>().Property<string>(x => x.JobName).HasColumnName(@"JobName").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<ResSchedule>().Property<string>(x => x.JobGroup).HasColumnName(@"JobGroup").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<ResSchedule>().Property<int>(x => x.JobStatus).HasColumnName(@"JobStatus").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResSchedule>().Property<string>(x => x.Cron).HasColumnName(@"Cron").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<ResSchedule>().Property<string>(x => x.AssemblyName).HasColumnName(@"AssemblyName").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<ResSchedule>().Property<string>(x => x.ClassName).HasColumnName(@"ClassName").IsRequired().ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<ResSchedule>().Property<string>(x => x.Remark).HasColumnName(@"Remark").ValueGeneratedNever();
            modelBuilder.Entity<ResSchedule>().Property<System.DateTime>(x => x.BeginTime).HasColumnName(@"BeginTime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResSchedule>().Property<System.DateTime?>(x => x.EndTime).HasColumnName(@"EndTime").ValueGeneratedNever();
            modelBuilder.Entity<ResSchedule>().Property<int>(x => x.TriggerType).HasColumnName(@"TriggerType").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResSchedule>().Property<int?>(x => x.IntervalSecond).HasColumnName(@"IntervalSecond").ValueGeneratedNever();
            modelBuilder.Entity<ResSchedule>().Property<string>(x => x.Url).HasColumnName(@"Url").HasColumnType(@"nvarchar(300)").ValueGeneratedNever().HasMaxLength(300);
            modelBuilder.Entity<ResSchedule>().Property<System.DateTime>(x => x.NextRunTime).HasColumnName(@"NextRunTime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResSchedule>().Property<System.DateTime?>(x => x.LastRunTime).HasColumnName(@"LastRunTime").ValueGeneratedNever();
            modelBuilder.Entity<ResSchedule>().Property<int?>(x => x.RunStatus).HasColumnName(@"RunStatus").ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<ResSchedule>().HasKey(@"Id");
        }

        partial void CustomizeResScheduleMapping(ModelBuilder modelBuilder);

        #endregion

        #region ResOperateLog Mapping

        private void ResOperateLogMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ResOperateLog>().ToTable(@"Res_OperateLog");
            modelBuilder.Entity<ResOperateLog>().Property<int>(@"Id").HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ResOperateLog>().Property<int>(@"CreateUid").HasColumnName(@"CreateUid").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResOperateLog>().Property<System.DateTime>(@"CreateDate").HasColumnName(@"CreateDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResOperateLog>().Property<int>(@"WriteUid").HasColumnName(@"WriteUid").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResOperateLog>().Property<System.DateTime>(@"WriteDate").HasColumnName(@"WriteDate").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResOperateLog>().Property<string>(x => x.TableName).HasColumnName(@"TableName").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResOperateLog>().Property<int>(x => x.Type).HasColumnName(@"Type").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResOperateLog>().Property<string>(x => x.Describe).HasColumnName(@"Describe").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ResOperateLog>().HasKey(@"Id");
        }

        partial void CustomizeResOperateLogMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECOrderConfigData Mapping

        private void ECOrderConfigDataMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECOrderConfigData>().ToTable(@"EC_OrderConfigDatas", @"dbo");
            modelBuilder.Entity<ECOrderConfigData>().Property<string>(x => x.OriginalOrderId).HasColumnName(@"OriginalOrderId").HasColumnType(@"nvarchar(64)").IsRequired().ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECOrderConfigData>().Property<string>(x => x.OriginalAccount).HasColumnName(@"OriginalAccount").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECOrderConfigData>().Property<string>(x => x.EbayOrders).HasColumnName(@"EbayOrders").HasColumnType(@"text").ValueGeneratedNever().HasMaxLength(2147483647);
            modelBuilder.Entity<ECOrderConfigData>().Property<string>(x => x.EbayOrderDetail).HasColumnName(@"EbayOrderDetail").HasColumnType(@"text").ValueGeneratedNever().HasMaxLength(2147483647);
            modelBuilder.Entity<ECOrderConfigData>().HasKey(@"OriginalOrderId");
        }

        partial void CustomizeECOrderConfigDataMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECProduct Mapping

        private void ECProductMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECProduct>().ToTable(@"EC_Product", @"dbo");
            modelBuilder.Entity<ECProduct>().Property<string>(x => x.ProductSku).HasColumnName(@"ProductSku").HasColumnType(@"nvarchar(64)").IsRequired().ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECProduct>().Property<string>(x => x.ProductTitle).HasColumnName(@"ProductTitle").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECProduct>().Property<string>(x => x.ProductTitleEn).HasColumnName(@"ProductTitleEn").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECProduct>().Property<string>(x => x.ProductSpu).HasColumnName(@"ProductSpu").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECProduct>().Property<decimal?>(x => x.ProductDeclaredValue).HasColumnName(@"ProductDeclaredValue").HasColumnType(@"decimal(12,2)").ValueGeneratedNever();
            modelBuilder.Entity<ECProduct>().Property<string>(x => x.PdDeclareCurrencyCode).HasColumnName(@"PdDeclareCurrencyCode").HasColumnType(@"nvarchar(10)").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<ECProduct>().Property<decimal?>(x => x.ProductWeight).HasColumnName(@"ProductWeight").HasColumnType(@"decimal(12,2)").ValueGeneratedNever();
            modelBuilder.Entity<ECProduct>().Property<decimal?>(x => x.ProductNetWeight).HasColumnName(@"ProductNetWeight").HasColumnType(@"decimal(12,2)").ValueGeneratedNever();
            modelBuilder.Entity<ECProduct>().Property<string>(x => x.DefaultSupplierCode).HasColumnName(@"DefaultSupplierCode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECProduct>().Property<int?>(x => x.ProductStatus).HasColumnName(@"ProductStatus").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECProduct>().Property<int?>(x => x.SaleStatus).HasColumnName(@"SaleStatus").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECProduct>().Property<bool?>(x => x.IsQc).HasColumnName(@"IsQc").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<ECProduct>().Property<bool?>(x => x.IsExpDate).HasColumnName(@"IsExpDate").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<ECProduct>().Property<bool?>(x => x.IsGift).HasColumnName(@"IsGift").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<ECProduct>().Property<string>(x => x.WarehouseBarcode).HasColumnName(@"WarehouseBarcode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECProduct>().Property<decimal?>(x => x.ProductLength).HasColumnName(@"ProductLength").HasColumnType(@"decimal(12,2)").ValueGeneratedNever();
            modelBuilder.Entity<ECProduct>().Property<decimal?>(x => x.ProductWidth).HasColumnName(@"ProductWidth").HasColumnType(@"decimal(12,2)").ValueGeneratedNever();
            modelBuilder.Entity<ECProduct>().Property<decimal?>(x => x.ProductHeight).HasColumnName(@"ProductHeight").HasColumnType(@"decimal(12,2)").ValueGeneratedNever();
            modelBuilder.Entity<ECProduct>().Property<int?>(x => x.DesignerId).HasColumnName(@"DesignerId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECProduct>().Property<int?>(x => x.PersonOpraterId).HasColumnName(@"PersonOpraterId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECProduct>().Property<int?>(x => x.PersonSellerId).HasColumnName(@"PersonSellerId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECProduct>().Property<int?>(x => x.PersonDevelopId).HasColumnName(@"PersonDevelopId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECProduct>().Property<System.DateTime?>(x => x.ProductAddTime).HasColumnName(@"ProductAddTime").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ECProduct>().Property<System.DateTime?>(x => x.ProductUpdateTime).HasColumnName(@"ProductUpdateTime").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ECProduct>().Property<System.DateTime?>(x => x.PpnReleaseDate).HasColumnName(@"PpnReleaseDate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ECProduct>().Property<int?>(x => x.IsCombination).HasColumnName(@"IsCombination").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECProduct>().Property<int?>(x => x.ProductColorId).HasColumnName(@"ProductColorId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECProduct>().Property<int?>(x => x.ProductSizeId).HasColumnName(@"ProductSizeId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECProduct>().Property<string>(x => x.PuName).HasColumnName(@"PuName").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECProduct>().Property<int?>(x => x.UserOrganizationId).HasColumnName(@"UserOrganizationId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECProduct>().Property<int?>(x => x.DefaultWarehouseId).HasColumnName(@"DefaultWarehouseId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECProduct>().Property<string>(x => x.EanCode).HasColumnName(@"EanCode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECProduct>().Property<string>(x => x.ProcutCategoryCode1).HasColumnName(@"ProcutCategoryCode1").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECProduct>().Property<string>(x => x.ProcutCategoryCode2).HasColumnName(@"ProcutCategoryCode2").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECProduct>().Property<string>(x => x.ProcutCategoryCode3).HasColumnName(@"ProcutCategoryCode3").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECProduct>().Property<string>(x => x.ProcutCategoryName1).HasColumnName(@"ProcutCategoryName1").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECProduct>().Property<string>(x => x.ProcutCategoryName2).HasColumnName(@"ProcutCategoryName2").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECProduct>().Property<string>(x => x.ProcutCategoryName3).HasColumnName(@"ProcutCategoryName3").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECProduct>().Property<int?>(x => x.OprationType).HasColumnName(@"OprationType").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECProduct>().Property<string>(x => x.BrandCode).HasColumnName(@"BrandCode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECProduct>().Property<string>(x => x.BrandName).HasColumnName(@"BrandName").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECProduct>().Property<string>(x => x.PrlCode).HasColumnName(@"PrlCode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECProduct>().Property<string>(x => x.PrlName).HasColumnName(@"PrlName").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECProduct>().Property<string>(x => x.CurrencyCode).HasColumnName(@"CurrencyCode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECProduct>().Property<string>(x => x.SpUnitPrice).HasColumnName(@"SpUnitPrice").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECProduct>().Property<string>(x => x.ProductImages).HasColumnName(@"ProductImages").HasColumnType(@"nvarchar(500)").ValueGeneratedNever().HasMaxLength(500);
            modelBuilder.Entity<ECProduct>().HasKey(@"ProductSku");
        }

        partial void CustomizeECProductMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECProductBox Mapping

        private void ECProductBoxMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECProductBox>().ToTable(@"EC_ProductBox", @"dbo");
            modelBuilder.Entity<ECProductBox>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ECProductBox>().Property<string>(x => x.BoxName).HasColumnName(@"BoxName").HasColumnType(@"nvarchar(128)").ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ECProductBox>().Property<string>(x => x.BoxNameEn).HasColumnName(@"boxNameEn").HasColumnType(@"nvarchar(128)").ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ECProductBox>().Property<decimal?>(x => x.BoxWidth).HasColumnName(@"boxWidth").HasColumnType(@"decimal(12,2)").ValueGeneratedNever();
            modelBuilder.Entity<ECProductBox>().Property<decimal?>(x => x.BoxHeight).HasColumnName(@"boxHeight").HasColumnType(@"decimal(12,2)").ValueGeneratedNever();
            modelBuilder.Entity<ECProductBox>().Property<decimal?>(x => x.BoxWeight).HasColumnName(@"boxWeight").HasColumnType(@"decimal(12,2)").ValueGeneratedNever();
            modelBuilder.Entity<ECProductBox>().Property<decimal?>(x => x.BoxLength).HasColumnName(@"boxLength").HasColumnType(@"decimal(12,2)").ValueGeneratedNever();
            modelBuilder.Entity<ECProductBox>().Property<int?>(x => x.Quantity).HasColumnName(@"quantity").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECProductBox>().Property<int?>(x => x.BoxStatus).HasColumnName(@"boxStatus").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECProductBox>().Property<string>(@"ProductSku").HasColumnName(@"ProductSku").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECProductBox>().HasKey(@"Id");
        }

        partial void CustomizeECProductBoxMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECProductCombination Mapping

        private void ECProductCombinationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECProductCombination>().ToTable(@"EC_ProductCombination", @"dbo");
            modelBuilder.Entity<ECProductCombination>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ECProductCombination>().Property<string>(x => x.PcrFnsku).HasColumnName(@"PcrFnsku").HasColumnType(@"nvarchar(128)").ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ECProductCombination>().Property<string>(x => x.PcrFbaAsin).HasColumnName(@"PcrFbaAsin").HasColumnType(@"nvarchar(128)").ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ECProductCombination>().Property<string>(x => x.WarehouseId).HasColumnName(@"WarehouseId").HasColumnType(@"nvarchar(10)").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<ECProductCombination>().Property<System.DateTime?>(x => x.PcrAddTime).HasColumnName(@"PcrAddTime").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ECProductCombination>().Property<System.DateTime?>(x => x.PcrUpdateTime).HasColumnName(@"PcrUpdateTime").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ECProductCombination>().Property<string>(@"ProductSku").HasColumnName(@"ProductSku").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECProductCombination>().HasKey(@"Id");
        }

        partial void CustomizeECProductCombinationMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECProductCustomCategory Mapping

        private void ECProductCustomCategoryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECProductCustomCategory>().ToTable(@"EC_ProductCustomCategory", @"dbo");
            modelBuilder.Entity<ECProductCustomCategory>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ECProductCustomCategory>().Property<string>(x => x.PucName).HasColumnName(@"PucName").HasColumnType(@"nvarchar(128)").ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ECProductCustomCategory>().Property<string>(@"ProductSku").HasColumnName(@"ProductSku").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECProductCustomCategory>().HasKey(@"Id");
        }

        partial void CustomizeECProductCustomCategoryMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECProductProperty Mapping

        private void ECProductPropertyMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECProductProperty>().ToTable(@"EC_ProductProperty", @"dbo");
            modelBuilder.Entity<ECProductProperty>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ECProductProperty>().Property<string>(x => x.AttrName).HasColumnName(@"AttrName").HasColumnType(@"nvarchar(128)").ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ECProductProperty>().Property<string>(x => x.AttrNameEn).HasColumnName(@"AttrNameEn").HasColumnType(@"nvarchar(128)").ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ECProductProperty>().Property<decimal?>(x => x.AttrValue).HasColumnName(@"AttrValue").HasColumnType(@"decimal(12,4)").ValueGeneratedNever();
            modelBuilder.Entity<ECProductProperty>().Property<string>(@"ProductSku").HasColumnName(@"ProductSku").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECProductProperty>().HasKey(@"Id");
        }

        partial void CustomizeECProductPropertyMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECSalesOrder Mapping

        private void ECSalesOrderMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECSalesOrder>().ToTable(@"EC_SalesOrder", @"dbo");
            modelBuilder.Entity<ECSalesOrder>().Property<string>(x => x.OrderId).HasColumnName(@"OrderId").HasColumnType(@"nvarchar(64)").IsRequired().ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECSalesOrder>().Property<string>(x => x.Plateform).HasColumnName(@"Plateform").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECSalesOrder>().Property<string>(x => x.OrderType).HasColumnName(@"OrderType").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECSalesOrder>().Property<int?>(x => x.Status).HasColumnName(@"Status").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECSalesOrder>().Property<int?>(x => x.ProcessAgain).HasColumnName(@"ProcessAgain").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECSalesOrder>().Property<string>(x => x.RefNo).HasColumnName(@"RefNo").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECSalesOrder>().Property<string>(x => x.SaleOrderCode).HasColumnName(@"SaleOrderCode").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECSalesOrder>().Property<string>(x => x.SysOrderCode).HasColumnName(@"SysOrderCode").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECSalesOrder>().Property<string>(x => x.WarehouseOrderCode).HasColumnName(@"WarehouseOrderCode").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECSalesOrder>().Property<string>(x => x.CompanyCode).HasColumnName(@"CompanyCode").HasColumnType(@"nvarchar(128)").ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ECSalesOrder>().Property<string>(x => x.UserAccount).HasColumnName(@"UserAccount").HasColumnType(@"nvarchar(128)").ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ECSalesOrder>().Property<string>(x => x.PlatformUserName).HasColumnName(@"PlatformUserName").HasColumnType(@"nvarchar(128)").ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ECSalesOrder>().Property<string>(x => x.ShippingMethod).HasColumnName(@"ShippingMethod").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECSalesOrder>().Property<string>(x => x.ShippingMethodNo).HasColumnName(@"ShippingMethodNo").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECSalesOrder>().Property<string>(x => x.ShippingMethodPlatform).HasColumnName(@"ShippingMethodPlatform").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECSalesOrder>().Property<string>(x => x.WarehouseId).HasColumnName(@"WarehouseId").HasColumnType(@"nvarchar(20)").ValueGeneratedNever().HasMaxLength(20);
            modelBuilder.Entity<ECSalesOrder>().Property<string>(x => x.WarehouseCode).HasColumnName(@"WarehouseCode").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECSalesOrder>().Property<System.DateTime?>(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ECSalesOrder>().Property<System.DateTime?>(x => x.UpdateDate).HasColumnName(@"UpdateDate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ECSalesOrder>().Property<System.DateTime?>(x => x.DatePaidPlatform).HasColumnName(@"DatePaidPlatform").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ECSalesOrder>().Property<int?>(x => x.PlatformShipStatus).HasColumnName(@"PlatformShipStatus").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECSalesOrder>().Property<System.DateTime?>(x => x.PlatformShipTime).HasColumnName(@"PlatformShipTime").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ECSalesOrder>().Property<System.DateTime?>(x => x.DateWarehouseShipping).HasColumnName(@"DateWarehouseShipping").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ECSalesOrder>().Property<System.DateTime?>(x => x.DateLatestShip).HasColumnName(@"DateLatestShip").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ECSalesOrder>().Property<string>(x => x.Currency).HasColumnName(@"Currency").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECSalesOrder>().Property<decimal?>(x => x.Amountpaid).HasColumnName(@"Amountpaid").HasColumnType(@"decimal(12,2)").ValueGeneratedNever();
            modelBuilder.Entity<ECSalesOrder>().Property<decimal?>(x => x.Subtotal).HasColumnName(@"Subtotal").HasColumnType(@"decimal(12,2)").ValueGeneratedNever();
            modelBuilder.Entity<ECSalesOrder>().Property<decimal?>(x => x.ShipFee).HasColumnName(@"ShipFee").HasColumnType(@"decimal(12,2)").ValueGeneratedNever();
            modelBuilder.Entity<ECSalesOrder>().Property<decimal?>(x => x.PlatformFeeTotal).HasColumnName(@"PlatformFeeTotal").HasColumnType(@"decimal(12,2)").ValueGeneratedNever();
            modelBuilder.Entity<ECSalesOrder>().Property<decimal?>(x => x.FinalvaluefeeTotal).HasColumnName(@"FinalvaluefeeTotal").HasColumnType(@"decimal(12,2)").ValueGeneratedNever();
            modelBuilder.Entity<ECSalesOrder>().Property<decimal?>(x => x.OtherFee).HasColumnName(@"OtherFee").HasColumnType(@"decimal(12,2)").ValueGeneratedNever();
            modelBuilder.Entity<ECSalesOrder>().Property<decimal?>(x => x.CostShipFee).HasColumnName(@"CostShipFee").HasColumnType(@"decimal(12,2)").ValueGeneratedNever();
            modelBuilder.Entity<ECSalesOrder>().Property<string>(x => x.BuyerId).HasColumnName(@"BuyerId").HasColumnType(@"nvarchar(128)").ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ECSalesOrder>().Property<string>(x => x.BuyerName).HasColumnName(@"BuyerName").HasColumnType(@"nvarchar(128)").ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ECSalesOrder>().Property<string>(x => x.BuyerMail).HasColumnName(@"BuyerMail").HasColumnType(@"nvarchar(128)").ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ECSalesOrder>().Property<string>(x => x.Site).HasColumnName(@"Site").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECSalesOrder>().Property<string>(x => x.CountryCode).HasColumnName(@"CountryCode").HasColumnType(@"nvarchar(10)").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<ECSalesOrder>().Property<int?>(x => x.ProductCount).HasColumnName(@"ProductCount").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECSalesOrder>().Property<decimal?>(x => x.OrderWeight).HasColumnName(@"OrderWeight").HasColumnType(@"decimal(12,2)").ValueGeneratedNever();
            modelBuilder.Entity<ECSalesOrder>().Property<string>(x => x.OrderDesc).HasColumnName(@"OrderDesc").HasColumnType(@"nvarchar(1500)").ValueGeneratedNever().HasMaxLength(1500);
            modelBuilder.Entity<ECSalesOrder>().Property<string>(x => x.PaypalTransactionId).HasColumnName(@"PaypalTransactionId").HasColumnType(@"nvarchar(200)").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECSalesOrder>().Property<string>(x => x.PaymentMethod).HasColumnName(@"PaymentMethod").HasColumnType(@"nvarchar(200)").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECSalesOrder>().Property<byte?>(x => x.AbnormalType).HasColumnName(@"AbnormalType").HasColumnType(@"tinyint").ValueGeneratedNever();
            modelBuilder.Entity<ECSalesOrder>().Property<string>(x => x.AbnormalReason).HasColumnName(@"AbnormalReason").HasColumnType(@"nvarchar(1000)").ValueGeneratedNever().HasMaxLength(1000);
            modelBuilder.Entity<ECSalesOrder>().Property<string>(@"ShippingAddressId").HasColumnName(@"ShippingAddressId").HasColumnType(@"nvarchar(11)").ValueGeneratedNever().HasMaxLength(11);
            modelBuilder.Entity<ECSalesOrder>().Property<string>(@"OriginalOrderId").HasColumnName(@"OriginalOrderId").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECSalesOrder>().Property<string>(x => x.SyncCode).HasColumnName(@"SyncCode").HasColumnType(@"nvarchar(20)").ValueGeneratedNever().HasMaxLength(20);
            modelBuilder.Entity<ECSalesOrder>().HasKey(@"OrderId");
        }

        partial void CustomizeECSalesOrderMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECSalesOrderAddress Mapping

        private void ECSalesOrderAddressMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECSalesOrderAddress>().ToTable(@"EC_SalesOrderAddress", @"dbo");
            modelBuilder.Entity<ECSalesOrderAddress>().Property<string>(x => x.ShippingAddressId).HasColumnName(@"ShippingAddressId").HasColumnType(@"nvarchar(11)").IsRequired().ValueGeneratedNever().HasMaxLength(11);
            modelBuilder.Entity<ECSalesOrderAddress>().Property<string>(x => x.Name).HasColumnName(@"Name").HasColumnType(@"nvarchar(128)").ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ECSalesOrderAddress>().Property<string>(x => x.CompanyName).HasColumnName(@"CompanyName").HasColumnType(@"nvarchar(128)").ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ECSalesOrderAddress>().Property<string>(x => x.CountryCode).HasColumnName(@"CountryCode").HasColumnType(@"nvarchar(2)").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<ECSalesOrderAddress>().Property<string>(x => x.CountryName).HasColumnName(@"CountryName").HasColumnType(@"nvarchar(128)").ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ECSalesOrderAddress>().Property<string>(x => x.CityName).HasColumnName(@"CityName").HasColumnType(@"nvarchar(200)").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECSalesOrderAddress>().Property<string>(x => x.PostalCode).HasColumnName(@"PostalCode").HasColumnType(@"nvarchar(200)").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECSalesOrderAddress>().Property<string>(x => x.Line1).HasColumnName(@"Line1").HasColumnType(@"nvarchar(200)").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECSalesOrderAddress>().Property<string>(x => x.Line2).HasColumnName(@"Line2").HasColumnType(@"nvarchar(200)").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECSalesOrderAddress>().Property<string>(x => x.Line3).HasColumnName(@"Line3").HasColumnType(@"nvarchar(200)").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECSalesOrderAddress>().Property<string>(x => x.District).HasColumnName(@"District").HasColumnType(@"nvarchar(60)").ValueGeneratedNever().HasMaxLength(60);
            modelBuilder.Entity<ECSalesOrderAddress>().Property<string>(x => x.State).HasColumnName(@"State").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECSalesOrderAddress>().Property<string>(x => x.Doorplate).HasColumnName(@"Doorplate").HasColumnType(@"nvarchar(200)").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECSalesOrderAddress>().Property<string>(x => x.Phone).HasColumnName(@"Phone").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECSalesOrderAddress>().Property<System.DateTime?>(x => x.CreatedDate).HasColumnName(@"CreatedDate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ECSalesOrderAddress>().Property<System.DateTime?>(x => x.UpdateDate).HasColumnName(@"UpdateDate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ECSalesOrderAddress>().HasKey(@"ShippingAddressId");
        }

        partial void CustomizeECSalesOrderAddressMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECSubProduct Mapping

        private void ECSubProductMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECSubProduct>().ToTable(@"EC_SubProducts", @"dbo");
            modelBuilder.Entity<ECSubProduct>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ECSubProduct>().Property<string>(x => x.PcrProductSku).HasColumnName(@"pcrProductSku").HasColumnType(@"nvarchar(128)").ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ECSubProduct>().Property<int?>(x => x.PcrQty).HasColumnName(@"pcrQty").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECSubProduct>().Property<int?>(@"ProductCombinationId").HasColumnName(@"ProductCombinationId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECSubProduct>().HasKey(@"Id");
        }

        partial void CustomizeECSubProductMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECWarehouse Mapping

        private void ECWarehouseMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECWarehouse>().ToTable(@"EC_Warehouse", @"dbo");
            modelBuilder.Entity<ECWarehouse>().Property<int>(x => x.WarehouseId).HasColumnName(@"WarehouseId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ECWarehouse>().Property<string>(x => x.WarehouseCode).HasColumnName(@"WarehouseCode").HasColumnType(@"nvarchar(32)").ValueGeneratedNever().HasMaxLength(32);
            modelBuilder.Entity<ECWarehouse>().Property<string>(x => x.WarehouseDesc).HasColumnName(@"WarehouseDesc").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECWarehouse>().Property<int?>(x => x.WarehouseType).HasColumnName(@"WarehouseType").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECWarehouse>().Property<int?>(x => x.WarehouseStatus).HasColumnName(@"WarehouseStatus").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECWarehouse>().Property<int?>(x => x.WarehouseVirtual).HasColumnName(@"WarehouseVirtual").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECWarehouse>().Property<string>(x => x.WarehouseService).HasColumnName(@"WarehouseService").HasColumnType(@"nvarchar(32)").ValueGeneratedNever().HasMaxLength(32);
            modelBuilder.Entity<ECWarehouse>().Property<int?>(x => x.IsTransfer).HasColumnName(@"IsTransfer").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECWarehouse>().Property<string>(x => x.CountryCode).HasColumnName(@"CountryCode").HasColumnType(@"nvarchar(2)").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<ECWarehouse>().Property<int?>(x => x.CountryId).HasColumnName(@"CountryId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECWarehouse>().Property<string>(x => x.State).HasColumnName(@"State").HasColumnType(@"nvarchar(32)").ValueGeneratedNever().HasMaxLength(32);
            modelBuilder.Entity<ECWarehouse>().Property<string>(x => x.City).HasColumnName(@"City").HasColumnType(@"nvarchar(32)").ValueGeneratedNever().HasMaxLength(32);
            modelBuilder.Entity<ECWarehouse>().Property<string>(x => x.Contacter).HasColumnName(@"Contacter").HasColumnType(@"nvarchar(200)").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECWarehouse>().Property<string>(x => x.Company).HasColumnName(@"Company").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<ECWarehouse>().Property<string>(x => x.PhoneNo).HasColumnName(@"PhoneNo").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECWarehouse>().Property<string>(x => x.StreetAddress1).HasColumnName(@"StreetAddress1").HasColumnType(@"nvarchar(200)").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECWarehouse>().Property<string>(x => x.StreetAddress2).HasColumnName(@"StreetAddress2").HasColumnType(@"nvarchar(200)").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECWarehouse>().Property<string>(x => x.Postcode).HasColumnName(@"Postcode").HasColumnType(@"nvarchar(32)").ValueGeneratedNever().HasMaxLength(32);
            modelBuilder.Entity<ECWarehouse>().Property<string>(x => x.StreetNumber).HasColumnName(@"StreetNumber").HasColumnType(@"nvarchar(200)").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECWarehouse>().Property<System.DateTime?>(x => x.WarehouseAddTime).HasColumnName(@"WarehouseAddTime").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ECWarehouse>().Property<System.DateTime?>(x => x.WarehouseUpdateTime).HasColumnName(@"WarehouseUpdateTime").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ECWarehouse>().HasKey(@"WarehouseId");
        }

        partial void CustomizeECWarehouseMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECSalesOrderDetail Mapping

        private void ECSalesOrderDetailMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECSalesOrderDetail>().ToTable(@"EC_SalesOrderDetail", @"dbo");
            modelBuilder.Entity<ECSalesOrderDetail>().Property<string>(x => x.OpId).HasColumnName(@"OpId").HasColumnType(@"nvarchar(20)").IsRequired().ValueGeneratedNever().HasMaxLength(20);
            modelBuilder.Entity<ECSalesOrderDetail>().Property<string>(@"OrderId").HasColumnName(@"OrderId").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECSalesOrderDetail>().Property<string>(x => x.ProductSku).HasColumnName(@"ProductSku").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<ECSalesOrderDetail>().Property<string>(x => x.Sku).HasColumnName(@"Sku").HasColumnType(@"nvarchar(400)").ValueGeneratedNever().HasMaxLength(400);
            modelBuilder.Entity<ECSalesOrderDetail>().Property<string>(x => x.WarehouseSku).HasColumnName(@"WarehouseSku").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<ECSalesOrderDetail>().Property<decimal?>(x => x.UnitPrice).HasColumnName(@"UnitPrice").HasColumnType(@"decimal(12,2)").ValueGeneratedNever();
            modelBuilder.Entity<ECSalesOrderDetail>().Property<int?>(x => x.Qty).HasColumnName(@"Qty").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECSalesOrderDetail>().Property<string>(x => x.ProductTitle).HasColumnName(@"ProductTitle").HasColumnType(@"nvarchar(512)").ValueGeneratedNever().HasMaxLength(512);
            modelBuilder.Entity<ECSalesOrderDetail>().Property<string>(x => x.Pic).HasColumnName(@"Pic").HasColumnType(@"nvarchar(512)").ValueGeneratedNever().HasMaxLength(512);
            modelBuilder.Entity<ECSalesOrderDetail>().Property<string>(x => x.OpSite).HasColumnName(@"OpSite").HasColumnType(@"nvarchar(200)").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECSalesOrderDetail>().Property<string>(x => x.ProductUrl).HasColumnName(@"ProductUrl").HasColumnType(@"nvarchar(512)").ValueGeneratedNever().HasMaxLength(512);
            modelBuilder.Entity<ECSalesOrderDetail>().Property<string>(x => x.RefItemId).HasColumnName(@"RefItemId").HasColumnType(@"nvarchar(128)").ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ECSalesOrderDetail>().Property<string>(x => x.OpRefItemLocation).HasColumnName(@"OpRefItemLocation").HasColumnType(@"nvarchar(128)").ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ECSalesOrderDetail>().Property<decimal?>(x => x.UnitFinalValueFee).HasColumnName(@"UnitFinalValueFee").HasColumnType(@"decimal(12,2)").ValueGeneratedNever();
            modelBuilder.Entity<ECSalesOrderDetail>().Property<decimal?>(x => x.TransactionPrice).HasColumnName(@"TransactionPrice").HasColumnType(@"decimal(12,2)").ValueGeneratedNever();
            modelBuilder.Entity<ECSalesOrderDetail>().Property<System.DateTime?>(x => x.OperTime).HasColumnName(@"OperTime").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ECSalesOrderDetail>().HasKey(@"OpId");
        }

        partial void CustomizeECSalesOrderDetailMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECReceivingDetail Mapping

        private void ECReceivingDetailMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECReceivingDetail>().ToTable(@"EC_ReceivingDetail");
            modelBuilder.Entity<ECReceivingDetail>().Property<string>(x => x.RlId).HasColumnName(@"RlId").IsRequired().ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECReceivingDetail>().Property<string>(x => x.ReferenceNo).HasColumnName(@"ReferenceNo").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECReceivingDetail>().Property<string>(x => x.WarehouseId).HasColumnName(@"WarehouseId").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECReceivingDetail>().Property<string>(x => x.ToWarehouseId).HasColumnName(@"ToWarehouseId").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECReceivingDetail>().Property<string>(x => x.WarehouseCode).HasColumnName(@"WarehouseCode").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECReceivingDetail>().Property<string>(x => x.lcCode).HasColumnName(@"lcCode").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECReceivingDetail>().Property<int?>(x => x.AddUser).HasColumnName(@"AddUser").ValueGeneratedNever().HasMaxLength(11);
            modelBuilder.Entity<ECReceivingDetail>().Property<int?>(x => x.ReceivingAddUser).HasColumnName(@"ReceivingAddUser").ValueGeneratedNever().HasMaxLength(11);
            modelBuilder.Entity<ECReceivingDetail>().Property<string>(x => x.ApplicationCode).HasColumnName(@"ApplicationCode").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECReceivingDetail>().Property<string>(x => x.ProductBarcode).HasColumnName(@"ProductBarcode").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECReceivingDetail>().Property<string>(x => x.ProductTitle).HasColumnName(@"ProductTitle").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECReceivingDetail>().Property<string>(x => x.PuCode).HasColumnName(@"PuCode").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECReceivingDetail>().Property<int?>(x => x.ContainBattery).HasColumnName(@"ContainBattery").ValueGeneratedNever().HasMaxLength(11);
            modelBuilder.Entity<ECReceivingDetail>().Property<int?>(x => x.ProductIsQc).HasColumnName(@"ProductIsQc").ValueGeneratedNever().HasMaxLength(11);
            modelBuilder.Entity<ECReceivingDetail>().Property<int?>(x => x.IsImitation).HasColumnName(@"IsImitation").ValueGeneratedNever().HasMaxLength(11);
            modelBuilder.Entity<ECReceivingDetail>().Property<int?>(x => x.IsExpDate).HasColumnName(@"IsExpDate").ValueGeneratedNever().HasMaxLength(11);
            modelBuilder.Entity<ECReceivingDetail>().Property<System.DateTime?>(x => x.ExpDate).HasColumnName(@"ExpDate").ValueGeneratedNever();
            modelBuilder.Entity<ECReceivingDetail>().Property<int?>(x => x.Category1).HasColumnName(@"Category1").ValueGeneratedNever().HasMaxLength(11);
            modelBuilder.Entity<ECReceivingDetail>().Property<int?>(x => x.Category2).HasColumnName(@"Category2").ValueGeneratedNever().HasMaxLength(11);
            modelBuilder.Entity<ECReceivingDetail>().Property<int?>(x => x.Category3).HasColumnName(@"Category3").ValueGeneratedNever().HasMaxLength(11);
            modelBuilder.Entity<ECReceivingDetail>().Property<string>(x => x.WarehouseProductBarcode).HasColumnName(@"WarehouseProductBarcode").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECReceivingDetail>().Property<string>(x => x.SupplierCode).HasColumnName(@"SupplierCode").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECReceivingDetail>().Property<string>(x => x.PoCode).HasColumnName(@"PoCode").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECReceivingDetail>().Property<System.DateTime?>(x => x.PoRelease).HasColumnName(@"PoRelease").ValueGeneratedNever();
            modelBuilder.Entity<ECReceivingDetail>().Property<int?>(x => x.IsReturned).HasColumnName(@"IsReturned").ValueGeneratedNever().HasMaxLength(11);
            modelBuilder.Entity<ECReceivingDetail>().Property<int?>(x => x.ReceivingReturnedQty).HasColumnName(@"ReceivingReturnedQty").ValueGeneratedNever().HasMaxLength(11);
            modelBuilder.Entity<ECReceivingDetail>().Property<int?>(x => x.QcReturnedQty).HasColumnName(@"QcReturnedQty").ValueGeneratedNever().HasMaxLength(11);
            modelBuilder.Entity<ECReceivingDetail>().Property<int?>(x => x.Quantity).HasColumnName(@"Quantity").ValueGeneratedNever().HasMaxLength(11);
            modelBuilder.Entity<ECReceivingDetail>().Property<double?>(x => x.OrgUnitPrice).HasColumnName(@"OrgUnitPrice").ValueGeneratedNever();
            modelBuilder.Entity<ECReceivingDetail>().Property<double?>(x => x.UnitPrice).HasColumnName(@"UnitPrice").ValueGeneratedNever();
            modelBuilder.Entity<ECReceivingDetail>().Property<int?>(x => x.ShippingFee).HasColumnName(@"ShippingFee").ValueGeneratedNever().HasMaxLength(11);
            modelBuilder.Entity<ECReceivingDetail>().Property<double?>(x => x.TariffFee).HasColumnName(@"TariffFee").ValueGeneratedNever();
            modelBuilder.Entity<ECReceivingDetail>().Property<double?>(x => x.UnitPurchaseShipFee).HasColumnName(@"UnitPurchaseShipFee").ValueGeneratedNever();
            modelBuilder.Entity<ECReceivingDetail>().Property<double?>(x => x.UnitPurchaseTaxationFee).HasColumnName(@"UnitPurchaseTaxationFee").ValueGeneratedNever();
            modelBuilder.Entity<ECReceivingDetail>().Property<double?>(x => x.Total).HasColumnName(@"Total").ValueGeneratedNever();
            modelBuilder.Entity<ECReceivingDetail>().Property<System.DateTime?>(x => x.AddTime).HasColumnName(@"AddTime").ValueGeneratedNever();
            modelBuilder.Entity<ECReceivingDetail>().Property<string>(x => x.ReceivingDescription).HasColumnName(@"ReceivingDescription").ValueGeneratedNever().HasMaxLength(1024);
            modelBuilder.Entity<ECReceivingDetail>().HasKey(@"RlId");
        }

        partial void CustomizeECReceivingDetailMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECDeliveryDetail Mapping

        private void ECDeliveryDetailMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECDeliveryDetail>().ToTable(@"EC_DeliveryDetail");
            modelBuilder.Entity<ECDeliveryDetail>().Property<string>(x => x.IlId).HasColumnName(@"IlId").IsRequired().ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECDeliveryDetail>().Property<string>(x => x.ReferenceNo).HasColumnName(@"ReferenceNo").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECDeliveryDetail>().Property<string>(x => x.WarehouseId).HasColumnName(@"WarehouseId").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECDeliveryDetail>().Property<string>(x => x.ToWarehouseId).HasColumnName(@"ToWarehouseId").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECDeliveryDetail>().Property<string>(x => x.WarehouseCode).HasColumnName(@"WarehouseCode").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECDeliveryDetail>().Property<string>(x => x.IcCode).HasColumnName(@"IcCode").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECDeliveryDetail>().Property<string>(x => x.UserId).HasColumnName(@"UserId").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECDeliveryDetail>().Property<string>(x => x.ApplicationCode).HasColumnName(@"ApplicationCode").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECDeliveryDetail>().Property<int?>(x => x.CuType).HasColumnName(@"CuType").ValueGeneratedNever().HasMaxLength(11);
            modelBuilder.Entity<ECDeliveryDetail>().Property<string>(x => x.ProductBarcode).HasColumnName(@"ProductBarcode").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECDeliveryDetail>().Property<string>(x => x.ProductTitle).HasColumnName(@"ProductTitle").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECDeliveryDetail>().Property<int?>(x => x.Category1).HasColumnName(@"Category1").ValueGeneratedNever().HasMaxLength(11);
            modelBuilder.Entity<ECDeliveryDetail>().Property<int?>(x => x.Category2).HasColumnName(@"Category2").ValueGeneratedNever().HasMaxLength(11);
            modelBuilder.Entity<ECDeliveryDetail>().Property<int?>(x => x.Category3).HasColumnName(@"Category3").ValueGeneratedNever().HasMaxLength(11);
            modelBuilder.Entity<ECDeliveryDetail>().Property<string>(x => x.WarehouseProductBarcode).HasColumnName(@"WarehouseProductBarcode").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECDeliveryDetail>().Property<string>(x => x.SupplierCode).HasColumnName(@"SupplierCode").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECDeliveryDetail>().Property<int?>(x => x.Quantity).HasColumnName(@"Quantity").ValueGeneratedNever().HasMaxLength(11);
            modelBuilder.Entity<ECDeliveryDetail>().Property<double?>(x => x.OrgUnitPrice).HasColumnName(@"OrgUnitPrice").ValueGeneratedNever();
            modelBuilder.Entity<ECDeliveryDetail>().Property<double?>(x => x.UnitPrice).HasColumnName(@"UnitPrice").ValueGeneratedNever();
            modelBuilder.Entity<ECDeliveryDetail>().Property<int?>(x => x.ShippingFee).HasColumnName(@"ShippingFee").ValueGeneratedNever().HasMaxLength(11);
            modelBuilder.Entity<ECDeliveryDetail>().Property<double?>(x => x.Tariff_Fee).HasColumnName(@"Tariff_Fee").ValueGeneratedNever();
            modelBuilder.Entity<ECDeliveryDetail>().Property<double?>(x => x.UnitPurchaseShipFee).HasColumnName(@"UnitPurchaseShipFee").ValueGeneratedNever();
            modelBuilder.Entity<ECDeliveryDetail>().Property<double?>(x => x.UnitPurchaseTaxationFee).HasColumnName(@"UnitPurchaseTaxationFee").ValueGeneratedNever();
            modelBuilder.Entity<ECDeliveryDetail>().Property<double?>(x => x.Total).HasColumnName(@"Total").ValueGeneratedNever();
            modelBuilder.Entity<ECDeliveryDetail>().Property<System.DateTime?>(x => x.AddTime).HasColumnName(@"AddTime").ValueGeneratedNever();
            modelBuilder.Entity<ECDeliveryDetail>().Property<string>(x => x.SystemRemark).HasColumnName(@"SystemRemark").ValueGeneratedNever().HasMaxLength(1024);
            modelBuilder.Entity<ECDeliveryDetail>().Property<string>(x => x.Remark).HasColumnName(@"Remark").ValueGeneratedNever().HasMaxLength(1024);
            modelBuilder.Entity<ECDeliveryDetail>().Property<string>(x => x.ProductRemark).HasColumnName(@"ProductRemark").ValueGeneratedNever().HasMaxLength(1024);
            modelBuilder.Entity<ECDeliveryDetail>().Property<string>(x => x.RefNo).HasColumnName(@"RefNo").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECDeliveryDetail>().HasKey(@"IlId");
        }

        partial void CustomizeECDeliveryDetailMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECRMARefund Mapping

        private void ECRMARefundMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECRMARefund>().ToTable(@"EC_RMARefund");
            modelBuilder.Entity<ECRMARefund>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd().HasMaxLength(11);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.CreateDate).HasColumnName(@"CreateDate").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.RefNo).HasColumnName(@"RefNo").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.WarehouseRefNo).HasColumnName(@"WarehouseRefNo").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.Reason).HasColumnName(@"Reason").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.TransId).HasColumnName(@"TransId").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.CreateUser).HasColumnName(@"CreateUser").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.Note).HasColumnName(@"Note").ValueGeneratedNever().HasMaxLength(1024);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.FinancialNote).HasColumnName(@"FinancialNote").ValueGeneratedNever().HasMaxLength(1024);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.VerifyDate).HasColumnName(@"VerifyDate").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.VerifyUser).HasColumnName(@"VerifyUser").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.UserAccount).HasColumnName(@"UserAccount").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.UserAccountName).HasColumnName(@"UserAccountName").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.RefrenceNoPlatform).HasColumnName(@"RefrenceNoPlatform").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.RmaRefrenceNoPlatform).HasColumnName(@"RmaRefrenceNoPlatform").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.WarehouseShipDate).HasColumnName(@"WarehouseShipDate").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.Country).HasColumnName(@"Country").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.Site).HasColumnName(@"Site").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.WarehousId).HasColumnName(@"WarehousId").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.ShippingMethod).HasColumnName(@"ShippingMethod").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.OperatorNote).HasColumnName(@"OperatorNote").ValueGeneratedNever().HasMaxLength(1024);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.CustomerServiceNote).HasColumnName(@"CustomerServiceNote").ValueGeneratedNever().HasMaxLength(1024);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.ProductSku).HasColumnName(@"ProductSku").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.SaleUser).HasColumnName(@"SaleUser").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.ProductTitle).HasColumnName(@"ProductTitle").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.Qty).HasColumnName(@"Qty").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.PcLike).HasColumnName(@"PcLike").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.PcName).HasColumnName(@"PcName").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.PayRefId).HasColumnName(@"PayRefId").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.RefundType).HasColumnName(@"RefundType").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.AmountRefund).HasColumnName(@"AmountRefund").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.AmountPaid).HasColumnName(@"AmountPaid").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.AmountOrder).HasColumnName(@"AmountOrder").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.Currency).HasColumnName(@"Currency").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.BuyerId).HasColumnName(@"BuyerId").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.RefundDate).HasColumnName(@"RefundDate").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.Status).HasColumnName(@"Status").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.RefundStep).HasColumnName(@"RefundStep").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.RefundDataSource).HasColumnName(@"RefundDataSource").ValueGeneratedNever().HasMaxLength(200);
            modelBuilder.Entity<ECRMARefund>().Property<string>(x => x.SyncMessage).HasColumnName(@"SyncMessage").ValueGeneratedNever().HasMaxLength(1024);
            modelBuilder.Entity<ECRMARefund>().HasKey(@"Id");
        }

        partial void CustomizeECRMARefundMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECSkuRelation Mapping

        private void ECSkuRelationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECSkuRelation>().ToTable(@"EC_SkuRelation", @"dbo");
            modelBuilder.Entity<ECSkuRelation>().Property<int>(x => x.RelationId).HasColumnName(@"RelationId").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ECSkuRelation>().Property<string>(x => x.UserAccount).HasColumnName(@"UserAccount").HasColumnType(@"nvarchar(4000)").ValueGeneratedNever().HasMaxLength(4000);
            modelBuilder.Entity<ECSkuRelation>().Property<string>(x => x.ProductSku).HasColumnName(@"ProductSku").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<ECSkuRelation>().Property<System.DateTime?>(x => x.CreateTime).HasColumnName(@"CreateTime").HasColumnType(@"datetime2").ValueGeneratedNever();
            modelBuilder.Entity<ECSkuRelation>().Property<string>(x => x.WarehouseId).HasColumnName(@"WarehouseId").HasColumnType(@"nvarchar(32)").ValueGeneratedNever().HasMaxLength(32);
            modelBuilder.Entity<ECSkuRelation>().HasKey(@"RelationId");
        }

        partial void CustomizeECSkuRelationMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECSkuRelationItem Mapping

        private void ECSkuRelationItemMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECSkuRelationItem>().ToTable(@"EC_SkuRelationItems", @"dbo");
            modelBuilder.Entity<ECSkuRelationItem>().Property<int>(x => x.RelationItemId).HasColumnName(@"RelationItemId").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ECSkuRelationItem>().Property<string>(x => x.PcrProductSku).HasColumnName(@"PcrProductSku").HasColumnType(@"nvarchar(4000)").ValueGeneratedNever().HasMaxLength(4000);
            modelBuilder.Entity<ECSkuRelationItem>().Property<string>(x => x.PcrQuantity).HasColumnName(@"PcrQuantity").HasColumnType(@"nvarchar(4000)").ValueGeneratedNever().HasMaxLength(4000);
            modelBuilder.Entity<ECSkuRelationItem>().Property<string>(x => x.PcrPercent).HasColumnName(@"PcrPercent").HasColumnType(@"nvarchar(4000)").ValueGeneratedNever().HasMaxLength(4000);
            modelBuilder.Entity<ECSkuRelationItem>().Property<int?>(@"RelationId").HasColumnName(@"RelationId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECSkuRelationItem>().HasKey(@"RelationItemId");
        }

        partial void CustomizeECSkuRelationItemMapping(ModelBuilder modelBuilder);

        #endregion

        #region BnsOmsReceivingCodeRecord Mapping

        private void BnsOmsReceivingCodeRecordMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<BnsOmsReceivingCodeRecord>().ToTable(@"Bns_OmsReceivingCodeRecord");
            modelBuilder.Entity<BnsOmsReceivingCodeRecord>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<BnsOmsReceivingCodeRecord>().Property<int?>(x => x.CreateUid).HasColumnName(@"CreateUid").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<BnsOmsReceivingCodeRecord>().Property<System.DateTime?>(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType(@"datetime2").ValueGeneratedNever();
            modelBuilder.Entity<BnsOmsReceivingCodeRecord>().Property<int?>(x => x.WriteUid).HasColumnName(@"WriteUid").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<BnsOmsReceivingCodeRecord>().Property<System.DateTime?>(x => x.WriteDate).HasColumnName(@"WriteDate").HasColumnType(@"datetime2").ValueGeneratedNever();
            modelBuilder.Entity<BnsOmsReceivingCodeRecord>().Property<bool?>(x => x.StopFlag).HasColumnName(@"StopFlag").HasColumnType(@"bit").ValueGeneratedNever().HasDefaultValueSql(@"false");
            modelBuilder.Entity<BnsOmsReceivingCodeRecord>().Property<string>(x => x.OmsReceivingCode).HasColumnName(@"OmsReceivingCode").HasColumnType(@"nvarchar(128)").ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<BnsOmsReceivingCodeRecord>().Property<int?>(x => x.State).HasColumnName(@"State").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<BnsOmsReceivingCodeRecord>().Property<string>(x => x.Message).HasColumnName(@"Message").HasColumnType(@"nvarchar(4000)").ValueGeneratedNever().HasMaxLength(4000);
            modelBuilder.Entity<BnsOmsReceivingCodeRecord>().HasKey(@"Id");
        }

        partial void CustomizeBnsOmsReceivingCodeRecordMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECAsn Mapping

        private void ECAsnMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECAsn>().ToTable(@"EC_Asn");
            modelBuilder.Entity<ECAsn>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ECAsn>().Property<string>(x => x.ReceiveCode).HasColumnName(@"ReceiveCode").IsRequired().ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECAsn>().Property<string>(x => x.ReferenceNo).HasColumnName(@"ReferenceNo").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECAsn>().Property<int?>(x => x.IncomeType).HasColumnName(@"IncomeType").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECAsn>().Property<string>(x => x.WarehouseCode).HasColumnName(@"WarehouseCode").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECAsn>().Property<string>(x => x.TransitWarehouseCode).HasColumnName(@"TransitWarehouseCode").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECAsn>().Property<string>(x => x.SmCode).HasColumnName(@"SmCode").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECAsn>().Property<string>(x => x.ShippingMethod).HasColumnName(@"ShippingMethod").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECAsn>().Property<string>(x => x.TrackingNumber).HasColumnName(@"TrackingNumber").HasColumnType(@"nvarchar(128)").ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ECAsn>().Property<string>(x => x.ReceivingStatus).HasColumnName(@"ReceivingStatus").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECAsn>().Property<string>(x => x.ReceivingDesc).HasColumnName(@"ReceivingDesc").HasColumnType(@"nvarchar(1024)").ValueGeneratedNever().HasMaxLength(1024);
            modelBuilder.Entity<ECAsn>().Property<System.DateTime?>(x => x.EtaDate).HasColumnName(@"EtaDate").HasColumnType(@"datetime2").ValueGeneratedNever();
            modelBuilder.Entity<ECAsn>().Property<System.DateTime?>(x => x.ReceivingModifyTime).HasColumnName(@"ReceivingModifyTime").HasColumnType(@"datetime2").ValueGeneratedNever();
            modelBuilder.Entity<ECAsn>().Property<int?>(x => x.RegionIdLevel0).HasColumnName(@"RegionIdLevel0").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECAsn>().Property<int?>(x => x.RegionIdLevel1).HasColumnName(@"RegionIdLevel1").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECAsn>().Property<int?>(x => x.RegionIdLevel2).HasColumnName(@"RegionIdLevel2").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECAsn>().Property<string>(x => x.Street).HasColumnName(@"Street").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<ECAsn>().Property<string>(x => x.Contacter).HasColumnName(@"Contacter").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<ECAsn>().Property<string>(x => x.ContactPhone).HasColumnName(@"ContactPhone").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<ECAsn>().Property<int?>(x => x.BoxTotal).HasColumnName(@"BoxTotal").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECAsn>().Property<int?>(x => x.SkuTotal).HasColumnName(@"SkuTotal").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECAsn>().Property<int?>(x => x.SkuSpecies).HasColumnName(@"SkuSpecies").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECAsn>().Property<System.DateTime?>(x => x.CalculateFeeTime).HasColumnName(@"CalculateFeeTime").HasColumnType(@"datetime2").ValueGeneratedNever();
            modelBuilder.Entity<ECAsn>().HasKey(@"Id");
        }

        partial void CustomizeECAsnMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECAsnItem Mapping

        private void ECAsnItemMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECAsnItem>().ToTable(@"EC_AsnItem");
            modelBuilder.Entity<ECAsnItem>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ECAsnItem>().Property<string>(x => x.ProductSku).HasColumnName(@"ProductSku").HasColumnType(@"nvarchar(128)").ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ECAsnItem>().Property<string>(x => x.ProductBarcode).HasColumnName(@"ProductBarcode").HasColumnType(@"nvarchar(128)").ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ECAsnItem>().Property<int?>(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECAsnItem>().Property<int?>(x => x.ReceivedQuantity).HasColumnName(@"ReceivedQuantity").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECAsnItem>().Property<int?>(x => x.BoxNo).HasColumnName(@"BoxNo").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECAsnItem>().Property<int?>(x => x.PutawayQuantity).HasColumnName(@"PutawayQuantity").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECAsnItem>().Property<decimal?>(x => x.ProductPrice).HasColumnName(@"ProductPrice").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECAsnItem>().Property<int?>(@"ECAsnId").HasColumnName(@"ECAsnId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECAsnItem>().HasKey(@"Id");
        }

        partial void CustomizeECAsnItemMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECAsnCost Mapping

        private void ECAsnCostMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECAsnCost>().ToTable(@"EC_AsnCost");
            modelBuilder.Entity<ECAsnCost>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ECAsnCost>().Property<decimal?>(x => x.TotalCost).HasColumnName(@"TotalCost").ValueGeneratedNever();
            modelBuilder.Entity<ECAsnCost>().Property<decimal?>(x => x.ShoppingCost).HasColumnName(@"ShoppingCost").ValueGeneratedNever();
            modelBuilder.Entity<ECAsnCost>().Property<decimal?>(x => x.CcfCost).HasColumnName(@"CcfCost").ValueGeneratedNever();
            modelBuilder.Entity<ECAsnCost>().Property<decimal?>(x => x.DtCost).HasColumnName(@"DtCost").ValueGeneratedNever();
            modelBuilder.Entity<ECAsnCost>().Property<decimal?>(x => x.OtherCost).HasColumnName(@"OtherCost").ValueGeneratedNever();
            modelBuilder.Entity<ECAsnCost>().Property<string>(x => x.CustomerCurrency).HasColumnName(@"CustomerCurrency").HasColumnType(@"nvarchar(32)").ValueGeneratedNever().HasMaxLength(32);
            modelBuilder.Entity<ECAsnCost>().Property<int?>(@"ECAsnId").HasColumnName(@"ECAsnId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECAsnCost>().HasKey(@"Id");
        }

        partial void CustomizeECAsnCostMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECAsnWarehouseAttr Mapping

        private void ECAsnWarehouseAttrMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECAsnWarehouseAttr>().ToTable(@"EC_AsnWarehouseAttr");
            modelBuilder.Entity<ECAsnWarehouseAttr>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ECAsnWarehouseAttr>().Property<decimal?>(x => x.ProductLength).HasColumnName(@"ProductLength").ValueGeneratedNever();
            modelBuilder.Entity<ECAsnWarehouseAttr>().Property<decimal?>(x => x.ProductWidth).HasColumnName(@"ProductWidth").ValueGeneratedNever();
            modelBuilder.Entity<ECAsnWarehouseAttr>().Property<decimal?>(x => x.ProductHeight).HasColumnName(@"ProductHeight").ValueGeneratedNever();
            modelBuilder.Entity<ECAsnWarehouseAttr>().Property<decimal?>(x => x.ProductWeight).HasColumnName(@"ProductWeight").ValueGeneratedNever();
            modelBuilder.Entity<ECAsnWarehouseAttr>().Property<int?>(@"ECAsnItemId").HasColumnName(@"ECAsnItemId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECAsnWarehouseAttr>().HasKey(@"Id");
        }

        partial void CustomizeECAsnWarehouseAttrMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECAsnProductCost Mapping

        private void ECAsnProductCostMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECAsnProductCost>().ToTable(@"EC_AsnProductCost");
            modelBuilder.Entity<ECAsnProductCost>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ECAsnProductCost>().Property<decimal?>(x => x.TotalCost).HasColumnName(@"TotalCost").ValueGeneratedNever();
            modelBuilder.Entity<ECAsnProductCost>().Property<decimal?>(x => x.ShoppingCost).HasColumnName(@"ShoppingCost").ValueGeneratedNever();
            modelBuilder.Entity<ECAsnProductCost>().Property<decimal?>(x => x.CcfCost).HasColumnName(@"CcfCost").ValueGeneratedNever();
            modelBuilder.Entity<ECAsnProductCost>().Property<decimal?>(x => x.DtCost).HasColumnName(@"DtCost").ValueGeneratedNever();
            modelBuilder.Entity<ECAsnProductCost>().Property<decimal?>(x => x.OtherCost).HasColumnName(@"OtherCost").ValueGeneratedNever();
            modelBuilder.Entity<ECAsnProductCost>().Property<string>(x => x.CustomerCurrency).HasColumnName(@"CustomerCurrency").HasColumnType(@"nvarchar(32)").ValueGeneratedNever().HasMaxLength(32);
            modelBuilder.Entity<ECAsnProductCost>().Property<decimal?>(x => x.HeadCost).HasColumnName(@"HeadCost").ValueGeneratedNever();
            modelBuilder.Entity<ECAsnProductCost>().Property<int?>(@"ECAsnItemId").HasColumnName(@"ECAsnItemId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECAsnProductCost>().HasKey(@"Id");
        }

        partial void CustomizeECAsnProductCostMapping(ModelBuilder modelBuilder);

        #endregion

        #region BnsUsBaseInventory Mapping

        private void BnsUsBaseInventoryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<BnsUsBaseInventory>().ToTable(@"Bns_UsBaseInventory");
            modelBuilder.Entity<BnsUsBaseInventory>().Property<int>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<BnsUsBaseInventory>().Property<int>(x => x.WarehouseId).HasColumnName(@"WarehouseId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<BnsUsBaseInventory>().Property<int>(x => x.Qty).HasColumnName(@"Qty").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<BnsUsBaseInventory>().Property<Xin.Entities.BnsUsTagType>(x => x.TagType).HasColumnName(@"TagType").HasColumnType(@"nvarchar(32)").IsRequired().ValueGeneratedNever().HasMaxLength(32);
            modelBuilder.Entity<BnsUsBaseInventory>().Property<string>(x => x.ProductSku).HasColumnName(@"ProductSku").IsRequired().ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<BnsUsBaseInventory>().HasKey(@"Id");
        }

        partial void CustomizeBnsUsBaseInventoryMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECShipBatch Mapping

        private void ECShipBatchMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECShipBatch>().ToTable(@"EC_ShipBatch", @"dbo");
            modelBuilder.Entity<ECShipBatch>().Property<string>(x => x.OrderCode).HasColumnName(@"OrderCode").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatch>().Property<string>(x => x.ReferenceNo).HasColumnName(@"ReferenceNo").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatch>().Property<System.DateTime?>(x => x.AddTime).HasColumnName(@"AddTime").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ECShipBatch>().Property<System.DateTime?>(x => x.ExpectedDate).HasColumnName(@"ExpectedDate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ECShipBatch>().Property<string>(x => x.TrackingNumber).HasColumnName(@"TrackingNumber").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatch>().Property<string>(x => x.RefNo).HasColumnName(@"RefNo").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatch>().Property<string>(x => x.UserAccount).HasColumnName(@"UserAccount").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatch>().Property<string>(x => x.ToWarehouse).HasColumnName(@"ToWarehouse").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatch>().Property<string>(x => x.Warehouse).HasColumnName(@"Warehouse").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatch>().Property<string>(x => x.SmCode).HasColumnName(@"SmCode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatch>().Property<string>(x => x.SmNameCn).HasColumnName(@"SmNameCn").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatch>().Property<string>(x => x.Destination).HasColumnName(@"Destination").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatch>().Property<decimal?>(x => x.HeadFreight).HasColumnName(@"HeadFreight").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECShipBatch>().Property<decimal?>(x => x.HeadTariff).HasColumnName(@"HeadTariff").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECShipBatch>().Property<string>(x => x.CostCurrencyCode).HasColumnName(@"CostCurrencyCode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatch>().Property<string>(x => x.TariffCurrencyCode).HasColumnName(@"TariffCurrencyCode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatch>().Property<string>(x => x.ParcelQuantity).HasColumnName(@"ParcelQuantity").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatch>().Property<string>(x => x.BoxCount).HasColumnName(@"BoxCount").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatch>().Property<decimal?>(x => x.Amount).HasColumnName(@"Amount").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECShipBatch>().Property<string>(x => x.SoWeight).HasColumnName(@"SoWeight").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatch>().Property<string>(x => x.SystemWeight).HasColumnName(@"SystemWeight").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatch>().Property<string>(x => x.Remark).HasColumnName(@"Remark").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatch>().Property<string>(x => x.OabName).HasColumnName(@"OabName").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatch>().Property<string>(x => x.OabPhone).HasColumnName(@"OabPhone").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatch>().Property<string>(x => x.OabFax).HasColumnName(@"OabFax").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatch>().Property<string>(x => x.OabCompany).HasColumnName(@"OabCompany").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatch>().Property<string>(x => x.OabEmail).HasColumnName(@"OabEmail").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatch>().Property<string>(x => x.OabPostcode).HasColumnName(@"OabPostcode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatch>().Property<string>(x => x.OabCounty).HasColumnName(@"OabCounty").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatch>().Property<string>(x => x.OabState).HasColumnName(@"OabState").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatch>().Property<string>(x => x.OabCity).HasColumnName(@"OabCity").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatch>().Property<string>(x => x.OabStreetAddress1).HasColumnName(@"OabStreetAddress1").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatch>().Property<string>(x => x.OabStreetAddress2).HasColumnName(@"OabStreetAddress2").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatch>().Property<string>(x => x.OabDoorplate).HasColumnName(@"OabDoorplate").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatch>().HasKey(@"OrderCode");
        }

        partial void CustomizeECShipBatchMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECShipBatchPackingInfo Mapping

        private void ECShipBatchPackingInfoMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECShipBatchPackingInfo>().ToTable(@"EC_ShipBatchPackingInfo", @"dbo");
            modelBuilder.Entity<ECShipBatchPackingInfo>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ECShipBatchPackingInfo>().Property<string>(x => x.ReferenceNo).HasColumnName(@"ReferenceNo").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatchPackingInfo>().Property<string>(x => x.TppCode).HasColumnName(@"TppCode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatchPackingInfo>().Property<int?>(x => x.TppQuantity).HasColumnName(@"TppQuantity").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECShipBatchPackingInfo>().Property<decimal?>(x => x.TppWeight).HasColumnName(@"TppWeight").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECShipBatchPackingInfo>().Property<string>(x => x.TppVolume).HasColumnName(@"TppVolume").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatchPackingInfo>().Property<string>(@"OrderCode").HasColumnName(@"OrderCode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatchPackingInfo>().HasKey(@"Id");
        }

        partial void CustomizeECShipBatchPackingInfoMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECShipBatchProductInfo Mapping

        private void ECShipBatchProductInfoMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECShipBatchProductInfo>().ToTable(@"EC_ShipBatchProductInfo", @"dbo");
            modelBuilder.Entity<ECShipBatchProductInfo>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ECShipBatchProductInfo>().Property<string>(x => x.ProductTitle).HasColumnName(@"ProductTitle").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatchProductInfo>().Property<string>(x => x.ProductBarcode).HasColumnName(@"ProductBarcode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatchProductInfo>().Property<string>(x => x.BarcodeCode).HasColumnName(@"BarcodeCode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatchProductInfo>().Property<string>(x => x.OpQuantity).HasColumnName(@"OpQuantity").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatchProductInfo>().Property<decimal?>(x => x.ProductWeight).HasColumnName(@"ProductWeight").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECShipBatchProductInfo>().Property<string>(x => x.Volume).HasColumnName(@"Volume").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatchProductInfo>().Property<System.DateTime?>(x => x.OpRefPaydate).HasColumnName(@"OpRefPaydate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ECShipBatchProductInfo>().Property<decimal?>(x => x.TotalWeight).HasColumnName(@"TotalWeight").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECShipBatchProductInfo>().Property<string>(@"OrderCode").HasColumnName(@"OrderCode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShipBatchProductInfo>().HasKey(@"Id");
        }

        partial void CustomizeECShipBatchProductInfoMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECFbaBoxDetail Mapping

        private void ECFbaBoxDetailMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECFbaBoxDetail>().ToTable(@"EC_FbaBoxDetail", @"dbo");
            modelBuilder.Entity<ECFbaBoxDetail>().Property<int>(x => x.BoxDetailId).HasColumnName(@"BoxDetailId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ECFbaBoxDetail>().Property<int?>(x => x.BoxId).HasColumnName(@"BoxId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaBoxDetail>().Property<string>(x => x.BoxCode).HasColumnName(@"BoxCode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaBoxDetail>().Property<int?>(x => x.ProductId).HasColumnName(@"ProductId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaBoxDetail>().Property<string>(x => x.ProductBarcode).HasColumnName(@"ProductBarcode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaBoxDetail>().Property<string>(x => x.GoodsBarcode).HasColumnName(@"GoodsBarcode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaBoxDetail>().Property<string>(x => x.ProductTitle).HasColumnName(@"ProductTitle").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaBoxDetail>().Property<decimal?>(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaBoxDetail>().Property<decimal?>(x => x.Length).HasColumnName(@"Length").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaBoxDetail>().Property<decimal?>(x => x.Width).HasColumnName(@"Width").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaBoxDetail>().Property<decimal?>(x => x.Height).HasColumnName(@"Height").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaBoxDetail>().Property<decimal?>(x => x.Weight).HasColumnName(@"Weight").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaBoxDetail>().Property<decimal?>(x => x.TransitQty).HasColumnName(@"TransitQty").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaBoxDetail>().Property<decimal?>(x => x.FinalQty).HasColumnName(@"FinalQty").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaBoxDetail>().Property<int?>(@"OrderId").HasColumnName(@"OrderId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaBoxDetail>().HasKey(@"BoxDetailId");
        }

        partial void CustomizeECFbaBoxDetailMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECFbaFinalBox Mapping

        private void ECFbaFinalBoxMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECFbaFinalBox>().ToTable(@"EC_FbaFinalBox", @"dbo");
            modelBuilder.Entity<ECFbaFinalBox>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ECFbaFinalBox>().Property<int?>(x => x.WarehouseId).HasColumnName(@"WarehouseId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaFinalBox>().Property<int?>(x => x.BoxId).HasColumnName(@"BoxId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaFinalBox>().Property<string>(x => x.BoxCode).HasColumnName(@"BoxCode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaFinalBox>().Property<string>(x => x.FbaCode).HasColumnName(@"FbaCode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaFinalBox>().Property<decimal?>(x => x.Length).HasColumnName(@"Length").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaFinalBox>().Property<decimal?>(x => x.Width).HasColumnName(@"Width").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaFinalBox>().Property<decimal?>(x => x.Height).HasColumnName(@"Height").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaFinalBox>().Property<decimal?>(x => x.Weight).HasColumnName(@"Weight").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaFinalBox>().Property<int?>(x => x.ProQty).HasColumnName(@"ProQty").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaFinalBox>().Property<int?>(x => x.MeasureUserId).HasColumnName(@"MeasureUserId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaFinalBox>().Property<System.DateTime?>(x => x.MeasureTime).HasColumnName(@"MeasureTime").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaFinalBox>().Property<System.DateTime?>(x => x.ArriveTime).HasColumnName(@"ArriveTime").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaFinalBox>().Property<System.DateTime?>(x => x.OutTime).HasColumnName(@"OutTime").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaFinalBox>().Property<int?>(x => x.ReceiptStatus).HasColumnName(@"ReceiptStatus").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaFinalBox>().Property<int?>(x => x.MeasureStatus).HasColumnName(@"MeasureStatus").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaFinalBox>().Property<int?>(x => x.ExceptionStatus).HasColumnName(@"ExceptionStatus").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaFinalBox>().Property<int?>(x => x.ExceptionConfirm).HasColumnName(@"ExceptionConfirm").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaFinalBox>().Property<string>(x => x.ExceptionInfo).HasColumnName(@"ExceptionInfo").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaFinalBox>().Property<System.DateTime?>(x => x.UpdateTime).HasColumnName(@"UpdateTime").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaFinalBox>().Property<int?>(@"FbaBoxId").HasColumnName(@"FbaBoxId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaFinalBox>().HasKey(@"Id");
        }

        partial void CustomizeECFbaFinalBoxMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECFbaLog Mapping

        private void ECFbaLogMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECFbaLog>().ToTable(@"EC_FbaLog", @"dbo");
            modelBuilder.Entity<ECFbaLog>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ECFbaLog>().Property<string>(x => x.FbaCode).HasColumnName(@"FbaCode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaLog>().Property<string>(x => x.BoxCode).HasColumnName(@"BoxCode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaLog>().Property<int?>(x => x.WarehouseId).HasColumnName(@"WarehouseId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaLog>().Property<int?>(x => x.OperationType).HasColumnName(@"OperationType").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaLog>().Property<int?>(x => x.StatusFrom).HasColumnName(@"StatusFrom").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaLog>().Property<int?>(x => x.StatusTo).HasColumnName(@"StatusTo").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaLog>().Property<string>(x => x.LogContent).HasColumnName(@"LogContent").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaLog>().Property<string>(x => x.ClientSys).HasColumnName(@"ClientSys").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaLog>().Property<int?>(x => x.UserId).HasColumnName(@"UserId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaLog>().Property<string>(x => x.UserName).HasColumnName(@"UserName").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaLog>().Property<string>(x => x.OperationTime).HasColumnName(@"OperationTime").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaLog>().Property<int?>(@"OrderId").HasColumnName(@"OrderId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaLog>().HasKey(@"Id");
        }

        partial void CustomizeECFbaLogMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECFbaOmsBox Mapping

        private void ECFbaOmsBoxMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECFbaOmsBox>().ToTable(@"EC_FbaOmsBox", @"dbo");
            modelBuilder.Entity<ECFbaOmsBox>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ECFbaOmsBox>().Property<string>(x => x.BoxCode).HasColumnName(@"BoxCode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaOmsBox>().Property<string>(x => x.BoxNum).HasColumnName(@"BoxNum").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaOmsBox>().Property<decimal?>(x => x.BoxLength).HasColumnName(@"BoxLength").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaOmsBox>().Property<decimal?>(x => x.BoxWidth).HasColumnName(@"BoxWidth").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaOmsBox>().Property<decimal?>(x => x.BoxHeight).HasColumnName(@"BoxHeight").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaOmsBox>().Property<decimal?>(x => x.BoxWeight).HasColumnName(@"BoxWeight").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaOmsBox>().Property<decimal?>(x => x.ProductQty).HasColumnName(@"ProductQty").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaOmsBox>().Property<int?>(@"FbaBoxId").HasColumnName(@"FbaBoxId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaOmsBox>().HasKey(@"Id");
        }

        partial void CustomizeECFbaOmsBoxMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECFbaOrder Mapping

        private void ECFbaOrderMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECFbaOrder>().ToTable(@"EC_FbaOrder", @"dbo");
            modelBuilder.Entity<ECFbaOrder>().Property<string>(x => x.FbaCode).HasColumnName(@"FbaCode").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaOrder>().Property<string>(x => x.AmazonShipment).HasColumnName(@"AmazonShipment").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaOrder>().Property<string>(x => x.AmazonReference).HasColumnName(@"AmazonReference").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaOrder>().Property<int?>(x => x.SmType).HasColumnName(@"SmType").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaOrder>().Property<int?>(x => x.FbaType).HasColumnName(@"FbaType").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaOrder>().Property<int?>(x => x.StockType).HasColumnName(@"StockType").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaOrder>().Property<int?>(x => x.FbaStatus).HasColumnName(@"FbaStatus").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaOrder>().Property<int?>(x => x.ExceptionStatus).HasColumnName(@"ExceptionStatus").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaOrder>().Property<int?>(x => x.BackStatus).HasColumnName(@"BackStatus").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaOrder>().Property<string>(x => x.CompanyCode).HasColumnName(@"CompanyCode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaOrder>().Property<string>(x => x.ExceptionInfo).HasColumnName(@"ExceptionInfo").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaOrder>().Property<int?>(x => x.ScId).HasColumnName(@"ScId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaOrder>().Property<int?>(x => x.LabelStatus).HasColumnName(@"LabelStatus").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaOrder>().Property<string>(x => x.TrackingNumber).HasColumnName(@"TrackingNumber").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaOrder>().Property<int?>(x => x.TransitWarehouseId).HasColumnName(@"TransitWarehouseId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaOrder>().Property<int?>(x => x.ToWarehouseId).HasColumnName(@"ToWarehouseId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaOrder>().Property<string>(x => x.SmCode).HasColumnName(@"SmCode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaOrder>().Property<int?>(x => x.FbaId).HasColumnName(@"FbaId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaOrder>().Property<int?>(x => x.WarehouseId).HasColumnName(@"WarehouseId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaOrder>().Property<int?>(x => x.NextWarehouseId).HasColumnName(@"NextWarehouse_id").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaOrder>().Property<int?>(x => x.IsInsurance).HasColumnName(@"IsInsurance").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaOrder>().Property<decimal?>(x => x.InsuranceValue).HasColumnName(@"InsuranceValue").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaOrder>().Property<int?>(x => x.BoxTotal).HasColumnName(@"box_total").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaOrder>().Property<int?>(x => x.ProductTotal).HasColumnName(@"ProductTotal").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaOrder>().Property<decimal?>(x => x.WeightTotal).HasColumnName(@"WeightTotal").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaOrder>().Property<decimal?>(x => x.ReckonWeight).HasColumnName(@"ReckonWeight").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaOrder>().Property<decimal?>(x => x.CurrencyAmount).HasColumnName(@"CurrencyAmount").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaOrder>().Property<string>(x => x.CurrencyCode).HasColumnName(@"CurrencyCode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaOrder>().Property<int?>(x => x.PayStatus).HasColumnName(@"PayStatus").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaOrder>().Property<string>(x => x.PayTime).HasColumnName(@"PayTime").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaOrder>().Property<string>(x => x.FbaRemarks).HasColumnName(@"FbaRemarks").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaOrder>().Property<int?>(x => x.CreateSite).HasColumnName(@"CreateSite").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaOrder>().Property<int?>(x => x.CreateUserId).HasColumnName(@"CreateUserId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaOrder>().Property<string>(x => x.CreateTime).HasColumnName(@"CreateTime").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaOrder>().Property<int?>(x => x.UpdateUserId).HasColumnName(@"UpdateUserId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaOrder>().Property<string>(x => x.UpdateTime).HasColumnName(@"UpdateTime").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaOrder>().Property<string>(x => x.TransitReceiptTime).HasColumnName(@"TransitReceiptTime").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaOrder>().Property<string>(x => x.TransitSendTime).HasColumnName(@"TransitSendTime").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaOrder>().Property<string>(x => x.ToReceiptTime).HasColumnName(@"ToReceiptTime").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaOrder>().Property<string>(x => x.ToSendTime).HasColumnName(@"ToSendTime").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaOrder>().Property<int?>(x => x.SyncWmsStatus).HasColumnName(@"SyncWmsStatus").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaOrder>().Property<string>(x => x.SyncWmsTime).HasColumnName(@"SyncWmsTime").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaOrder>().HasKey(@"FbaCode");
        }

        partial void CustomizeECFbaOrderMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECFbaPackBox Mapping

        private void ECFbaPackBoxMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECFbaPackBox>().ToTable(@"EC_FbaPackBox", @"dbo");
            modelBuilder.Entity<ECFbaPackBox>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ECFbaPackBox>().Property<string>(x => x.BoxCode).HasColumnName(@"BoxCode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaPackBox>().Property<string>(x => x.BoxNum).HasColumnName(@"BoxNum").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaPackBox>().Property<string>(x => x.BoxLength).HasColumnName(@"BoxLength").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaPackBox>().Property<string>(x => x.BoxWidth).HasColumnName(@"BoxWidth").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaPackBox>().Property<string>(x => x.BoxHeight).HasColumnName(@"BoxHeight").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaPackBox>().Property<string>(x => x.BoxWeight).HasColumnName(@"BoxWeight").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaPackBox>().Property<string>(x => x.ProductQty).HasColumnName(@"ProductQty").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaPackBox>().Property<string>(x => x.TrackingNumber).HasColumnName(@"TrackingNumber").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaPackBox>().Property<string>(x => x.BoxWeightCharged).HasColumnName(@"BoxWeightCharged").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaPackBox>().Property<int?>(@"OrderId").HasColumnName(@"OrderId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaPackBox>().HasKey(@"Id");
        }

        partial void CustomizeECFbaPackBoxMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECFbaPackDetail Mapping

        private void ECFbaPackDetailMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECFbaPackDetail>().ToTable(@"EC_FbaPackDetail", @"dbo");
            modelBuilder.Entity<ECFbaPackDetail>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ECFbaPackDetail>().Property<int?>(x => x.PackDetailId).HasColumnName(@"PackDetailId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaPackDetail>().Property<int?>(x => x.BoxNum).HasColumnName(@"BoxNum").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaPackDetail>().Property<int?>(x => x.ProductId).HasColumnName(@"ProductId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaPackDetail>().Property<string>(x => x.ProductBarcode).HasColumnName(@"ProductBarcode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaPackDetail>().Property<string>(x => x.GoodsBarcode).HasColumnName(@"GoodsBarcode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaPackDetail>().Property<string>(x => x.ProductTitle).HasColumnName(@"ProductTitle").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaPackDetail>().Property<decimal?>(x => x.Quantity).HasColumnName(@"Quantity").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaPackDetail>().Property<decimal?>(x => x.Length).HasColumnName(@"Length").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaPackDetail>().Property<decimal?>(x => x.Width).HasColumnName(@"Width").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaPackDetail>().Property<decimal?>(x => x.Height).HasColumnName(@"Height").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaPackDetail>().Property<decimal?>(x => x.Weight).HasColumnName(@"Weight").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaPackDetail>().Property<int?>(@"OrderId").HasColumnName(@"OrderId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaPackDetail>().HasKey(@"Id");
        }

        partial void CustomizeECFbaPackDetailMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECFbaQueryOrder Mapping

        private void ECFbaQueryOrderMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECFbaQueryOrder>().ToTable(@"EC_FbaQueryOrder", @"dbo");
            modelBuilder.Entity<ECFbaQueryOrder>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ECFbaQueryOrder>().Property<string>(x => x.FbaCode).HasColumnName(@"FbaCode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaQueryOrder>().Property<string>(x => x.FbaTracking).HasColumnName(@"FbaTracking").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaQueryOrder>().Property<string>(x => x.FbaOrderCost).HasColumnName(@"FbaOrderCost").HasColumnType(@"nvarchar(max)").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaQueryOrder>().HasKey(@"Id");
            modelBuilder.Entity<ECFbaQueryOrder>().HasIndex(@"FbaCode").IsUnique(true);
        }

        partial void CustomizeECFbaQueryOrderMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECFbaTransitBox Mapping

        private void ECFbaTransitBoxMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECFbaTransitBox>().ToTable(@"EC_FbaTransitBox", @"dbo");
            modelBuilder.Entity<ECFbaTransitBox>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ECFbaTransitBox>().Property<int?>(x => x.WarehouseId).HasColumnName(@"WarehouseId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaTransitBox>().Property<int?>(x => x.BoxId).HasColumnName(@"BoxId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaTransitBox>().Property<string>(x => x.BoxCode).HasColumnName(@"BoxCode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaTransitBox>().Property<string>(x => x.FbaCode).HasColumnName(@"FbaCode").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaTransitBox>().Property<decimal?>(x => x.Length).HasColumnName(@"Length").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaTransitBox>().Property<decimal?>(x => x.Width).HasColumnName(@"Width").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaTransitBox>().Property<decimal?>(x => x.Height).HasColumnName(@"Height").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaTransitBox>().Property<decimal?>(x => x.Weight).HasColumnName(@"Weight").HasColumnType(@"decimal(18)").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaTransitBox>().Property<int?>(x => x.ProQty).HasColumnName(@"ProQty").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaTransitBox>().Property<int?>(x => x.MeasureUserId).HasColumnName(@"MeasureUserId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaTransitBox>().Property<System.DateTime?>(x => x.MeasureTime).HasColumnName(@"MeasureTime").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaTransitBox>().Property<System.DateTime?>(x => x.ArriveTime).HasColumnName(@"ArriveTime").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaTransitBox>().Property<System.DateTime?>(x => x.OutTime).HasColumnName(@"OutTime").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaTransitBox>().Property<int?>(x => x.ReceiptStatus).HasColumnName(@"ReceiptStatus").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaTransitBox>().Property<int?>(x => x.MeasureStatus).HasColumnName(@"MeasureStatus").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaTransitBox>().Property<int?>(x => x.ExceptionStatus).HasColumnName(@"ExceptionStatus").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaTransitBox>().Property<int?>(x => x.ExceptionConfirm).HasColumnName(@"ExceptionConfirm").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaTransitBox>().Property<string>(x => x.ExceptionInfo).HasColumnName(@"ExceptionInfo").HasColumnType(@"nvarchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECFbaTransitBox>().Property<System.DateTime?>(x => x.UpdateTime).HasColumnName(@"UpdateTime").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaTransitBox>().Property<int?>(@"FbaBoxId").HasColumnName(@"FbaBoxId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaTransitBox>().HasKey(@"Id");
        }

        partial void CustomizeECFbaTransitBoxMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECFbaBox Mapping

        private void ECFbaBoxMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECFbaBox>().ToTable(@"EC_FbaBox", @"dbo");
            modelBuilder.Entity<ECFbaBox>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ECFbaBox>().Property<int?>(x => x.OrderId).HasColumnName(@"OrderId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECFbaBox>().HasKey(@"Id");
            modelBuilder.Entity<ECFbaBox>().HasIndex(@"OrderId").IsUnique(true);
        }

        partial void CustomizeECFbaBoxMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECProcessedSkuRelationItem Mapping

        private void ECProcessedSkuRelationItemMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECProcessedSkuRelationItem>().ToTable(@"EC_Processed_SkuRelationItems", @"dbo");
            modelBuilder.Entity<ECProcessedSkuRelationItem>().Property<int>(x => x.RelationItemId).HasColumnName(@"RelationItemId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECProcessedSkuRelationItem>().Property<int?>(x => x.RelationId).HasColumnName(@"RelationId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECProcessedSkuRelationItem>().Property<string>(x => x.StoreProductCategory).HasColumnName(@"StoreProductCategory").HasColumnType(@"nvarchar(128)").ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ECProcessedSkuRelationItem>().Property<string>(x => x.PcrProductSku).HasColumnName(@"PcrProductSku").HasColumnType(@"nvarchar(128)").ValueGeneratedNever().HasMaxLength(128);
            modelBuilder.Entity<ECProcessedSkuRelationItem>().Property<int?>(x => x.PcrQuantity).HasColumnName(@"PcrQuantity").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECProcessedSkuRelationItem>().Property<decimal?>(x => x.PcrPercent).HasColumnName(@"PcrPercent").HasColumnType(@"decimal(12,2)").ValueGeneratedNever();
            modelBuilder.Entity<ECProcessedSkuRelationItem>().Property<string>(x => x.Density).HasColumnName(@"Density").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<ECProcessedSkuRelationItem>().Property<string>(x => x.HandArea).HasColumnName(@"HandArea").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<ECProcessedSkuRelationItem>().Property<string>(x => x.Style).HasColumnName(@"Style").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<ECProcessedSkuRelationItem>().Property<string>(x => x.Size).HasColumnName(@"Size").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<ECProcessedSkuRelationItem>().Property<string>(x => x.ProductCategory).HasColumnName(@"ProductCategory").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<ECProcessedSkuRelationItem>().Property<string>(x => x.ProductType).HasColumnName(@"ProductType").HasColumnType(@"varchar(20)").ValueGeneratedNever().HasMaxLength(20);
            modelBuilder.Entity<ECProcessedSkuRelationItem>().HasKey(@"RelationItemId");
        }

        partial void CustomizeECProcessedSkuRelationItemMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECProcessedSkuRelation Mapping

        private void ECProcessedSkuRelationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECProcessedSkuRelation>().ToTable(@"EC_Processed_SkuRelation", @"dbo");
            modelBuilder.Entity<ECProcessedSkuRelation>().Property<int>(x => x.RelationId).HasColumnName(@"RelationId").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ECProcessedSkuRelation>().Property<string>(x => x.ProductSku).HasColumnName(@"ProductSku").HasColumnType(@"nvarchar(256)").ValueGeneratedNever().HasMaxLength(256);
            modelBuilder.Entity<ECProcessedSkuRelation>().HasKey(@"RelationId");
        }

        partial void CustomizeECProcessedSkuRelationMapping(ModelBuilder modelBuilder);

        #endregion

        #region ResMenu Mapping

        private void ResMenuMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ResMenu>().ToTable(@"Res_Menus", @"dbo");
            modelBuilder.Entity<ResMenu>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ResMenu>().Property<int?>(@"ParentId").HasColumnName(@"parent_id").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ResMenu>().Property<string>(x => x.Icon).HasColumnName(@"icon").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ResMenu>().Property<string>(x => x.Url).HasColumnName(@"url").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ResMenu>().Property<string>(x => x.Component).HasColumnName(@"component").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ResMenu>().Property<string>(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ResMenu>().Property<string>(x => x.BeforeCloseName).HasColumnName(@"before_close_name").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ResMenu>().Property<bool?>(x => x.NotCache).HasColumnName(@"not_cache").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<ResMenu>().Property<string>(x => x.Access).HasColumnName(@"access").HasColumnType(@"varchar(4000)").ValueGeneratedNever().HasMaxLength(4000);
            modelBuilder.Entity<ResMenu>().Property<bool?>(x => x.HideInMenu).HasColumnName(@"hide_in_menu").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<ResMenu>().Property<bool?>(x => x.HideInBread).HasColumnName(@"hide_in_bread").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<ResMenu>().Property<string>(x => x.Title).HasColumnName(@"title").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ResMenu>().HasKey(@"Id");
        }

        partial void CustomizeResMenuMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECCountry Mapping

        private void ECCountryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECCountry>().ToTable(@"EC_Country", @"dbo");
            modelBuilder.Entity<ECCountry>().Property<string>(x => x.CountryId).HasColumnName(@"country_id").HasColumnType(@"nvarchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECCountry>().Property<string>(x => x.CountryName).HasColumnName(@"country_name").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECCountry>().Property<string>(x => x.CountryNameEn).HasColumnName(@"country_name_en").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECCountry>().Property<string>(x => x.CountryCode).HasColumnName(@"country_code").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECCountry>().HasKey(@"CountryId");
        }

        partial void CustomizeECCountryMapping(ModelBuilder modelBuilder);

        #endregion

        #region BnsAmazonInstance Mapping

        private void BnsAmazonInstanceMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<BnsAmazonInstance>().ToTable(@"Bns_AmazonInstance", @"dbo");
            modelBuilder.Entity<BnsAmazonInstance>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<BnsAmazonInstance>().Property<int?>(x => x.CreateUid).HasColumnName(@"CreateUid").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<BnsAmazonInstance>().Property<string>(x => x.AWSACCESSKEY).HasColumnName(@"AWS_ACCESS_KEY").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonInstance>().Property<string>(x => x.MARKETPLACEID).HasColumnName(@"MARKETPLACE_ID").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonInstance>().Property<string>(x => x.SELLERID).HasColumnName(@"SELLER_ID").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonInstance>().Property<string>(x => x.WriteUid).HasColumnName(@"WriteUid").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonInstance>().Property<string>(x => x.WriteDate).HasColumnName(@"WriteDate").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonInstance>().Property<string>(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonInstance>().Property<string>(x => x.SECRETKEY).HasColumnName(@"SECRET_KEY").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonInstance>().Property<string>(x => x.Store).HasColumnName(@"Store").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonInstance>().Property<int?>(x => x.PaypaInstanceId).HasColumnName(@"PaypaInstanceId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<BnsAmazonInstance>().HasKey(@"Id");
        }

        partial void CustomizeBnsAmazonInstanceMapping(ModelBuilder modelBuilder);

        #endregion

        #region BnsAmazonReport Mapping

        private void BnsAmazonReportMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<BnsAmazonReport>().ToTable(@"Bns_AmazonReport", @"dbo");
            modelBuilder.Entity<BnsAmazonReport>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<BnsAmazonReport>().Property<string>(x => x.ReportRequestId).HasColumnName(@"ReportRequestId").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReport>().Property<string>(x => x.ReportType).HasColumnName(@"ReportType").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReport>().Property<System.DateTime?>(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType(@"date").ValueGeneratedNever();
            modelBuilder.Entity<BnsAmazonReport>().Property<string>(x => x.ReportId).HasColumnName(@"ReportId").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReport>().Property<string>(x => x.Store).HasColumnName(@"Store").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReport>().Property<System.DateTime?>(x => x.AvailableDate).HasColumnName(@"AvailableDate").HasColumnType(@"date").ValueGeneratedNever();
            modelBuilder.Entity<BnsAmazonReport>().Property<System.DateTime?>(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType(@"date").ValueGeneratedNever();
            modelBuilder.Entity<BnsAmazonReport>().Property<System.DateTime?>(x => x.StartDate).HasColumnName(@"StartDate").HasColumnType(@"date").ValueGeneratedNever();
            modelBuilder.Entity<BnsAmazonReport>().HasKey(@"Id");
        }

        partial void CustomizeBnsAmazonReportMapping(ModelBuilder modelBuilder);

        #endregion

        #region BnsAmazonReportDetail Mapping

        private void BnsAmazonReportDetailMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<BnsAmazonReportDetail>().ToTable(@"Bns_AmazonReportDetail", @"dbo");
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.PostedDate).HasColumnName(@"PostedDate").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.ShipmentFeeType).HasColumnName(@"ShipmentFeeType").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.DepositDate).HasColumnName(@"DepositDate").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.PromotionType).HasColumnName(@"PromotionType").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.OtherFeeReasonDescription).HasColumnName(@"OtherFeeReasonDescription").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.Currency).HasColumnName(@"Currency").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.QuantityPurchased).HasColumnName(@"QuantityPurchased").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.SettlementId).HasColumnName(@"SettlementId").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.MerchantAdjustmentItemId).HasColumnName(@"MerchantAdjustmentItemId").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.FulfillmentId).HasColumnName(@"FulfillmentId").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.PromotionId).HasColumnName(@"PromotionId").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.MarketplaceName).HasColumnName(@"MarketplaceName").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.Sku).HasColumnName(@"Sku").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.SettlementStartDate).HasColumnName(@"SettlementStartDate").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.OrderId).HasColumnName(@"OrderId").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.DirectPaymentType).HasColumnName(@"DirectPaymentType").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.MerchantOrderId).HasColumnName(@"MerchantOrderId").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<int?>(@"AmazonReportId").HasColumnName(@"AmazonReportId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.OrderItemCode).HasColumnName(@"OrderItemCode").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.SettlementEndDate).HasColumnName(@"SettlementEndDate").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.PriceType).HasColumnName(@"PriceType").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.AdjustmentId).HasColumnName(@"AdjustmentId").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.TransactionType).HasColumnName(@"TransactionType").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.MerchantOrderItemId).HasColumnName(@"MerchantOrderItemId").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.OrderFeeType).HasColumnName(@"OrderFeeType").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.ShipmentId).HasColumnName(@"ShipmentId").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.ItemRelatedFeeType).HasColumnName(@"ItemRelatedFeeType").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.ItemRelatedFeeAmount).HasColumnName(@"ItemRelatedFeeAmount").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.OtherFeeAmount).HasColumnName(@"OtherFeeAmount").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.DirectPaymentAmount).HasColumnName(@"DirectPaymentAmount").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.PromotionAmount).HasColumnName(@"PromotionAmount").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.PriceAmount).HasColumnName(@"PriceAmount").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.MiscFeeAmount).HasColumnName(@"MiscFeeAmount").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.OtherAmount).HasColumnName(@"OtherAmount").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.OrderFeeAmount).HasColumnName(@"OrderFeeAmount").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<int?>(x => x.AmazonReportOrderId).HasColumnName(@"AmazonReportOrderId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.TotalAmount).HasColumnName(@"TotalAmount").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.ShipmentFeeAmount).HasColumnName(@"ShipmentFeeAmount").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().Property<string>(x => x.Store).HasColumnName(@"Store").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsAmazonReportDetail>().HasKey(@"Id");
        }

        partial void CustomizeBnsAmazonReportDetailMapping(ModelBuilder modelBuilder);

        #endregion

        #region BnsPaypalInstance Mapping

        private void BnsPaypalInstanceMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<BnsPaypalInstance>().ToTable(@"Bns_PaypalInstance", @"dbo");
            modelBuilder.Entity<BnsPaypalInstance>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<BnsPaypalInstance>().Property<string>(x => x.CreateDate).HasColumnName(@"CreateDate").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalInstance>().Property<string>(x => x.Name).HasColumnName(@"Name").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalInstance>().Property<string>(x => x.ClientId).HasColumnName(@"ClientId").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalInstance>().Property<string>(x => x.ClientSecret).HasColumnName(@"ClientSecret").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalInstance>().Property<string>(x => x.Zone).HasColumnName(@"Zone").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalInstance>().Property<string>(x => x.Store).HasColumnName(@"Store").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalInstance>().Property<string>(x => x.Zone1).HasColumnName(@"Zone1").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalInstance>().Property<string>(x => x.ShopMark).HasColumnName(@"ShopMark").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalInstance>().HasKey(@"Id");
        }

        partial void CustomizeBnsPaypalInstanceMapping(ModelBuilder modelBuilder);

        #endregion

        #region BnsPaypalTransactionDetail Mapping

        private void BnsPaypalTransactionDetailMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<BnsPaypalTransactionDetail>().ToTable(@"Bns_PaypalTransactionDetails", @"dbo");
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.TransactionInfoTransactionId).HasColumnName(@"TransactionInfoTransactionId").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.TransactionInfoPaypalReferenceId).HasColumnName(@"TransactionInfoPaypalReferenceId").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.TransactionInfoPaypalReferenceIdType).HasColumnName(@"TransactionInfoPaypalReferenceIdType").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.TransactionInfoTransactionEventCode).HasColumnName(@"TransactionInfoTransactionEventCode").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.TransactionInfoTransactionInitiationDate).HasColumnName(@"TransactionInfoTransactionInitiationDate").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.TransactionInfoTransactionUpdatedDate).HasColumnName(@"TransactionInfoTransactionUpdatedDate").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.TransactionInfoTransactionAmountCurrencyCode).HasColumnName(@"TransactionInfoTransactionAmountCurrencyCode").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.TransactionInfoTransactionAmountValue).HasColumnName(@"TransactionInfoTransactionAmountValue").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.TransactionInfoFeeAmountCurrencyCode).HasColumnName(@"TransactionInfoFeeAmountCurrencyCode").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.TransactionInfoFeeAmountValue).HasColumnName(@"TransactionInfoFeeAmountValue").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.TransactionInfoSalesTaxAmountCurrencyCode).HasColumnName(@"TransactionInfoSalesTaxAmountCurrencyCode").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.TransactionInfoSalesTaxAmountValue).HasColumnName(@"TransactionInfoSalesTaxAmountValue").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.TransactionInfoEndingBalance).HasColumnName(@"TransactionInfoEndingBalance").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.TransactionInfoAvailableBalance).HasColumnName(@"TransactionInfoAvailableBalance").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.TransactionInfoTransactionStatus).HasColumnName(@"TransactionInfoTransactionStatus").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.TransactionInfoInvoiceId).HasColumnName(@"TransactionInfoInvoiceId").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.TransactionInfoInsuranceAmountCurrencyCode).HasColumnName(@"TransactionInfoInsuranceAmountCurrencyCode").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.TransactionInfoInsuranceAmountVlaue).HasColumnName(@"TransactionInfoInsuranceAmountVlaue").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.TransactionInfoShippingAmountCurrencyCode).HasColumnName(@"TransactionInfoShippingAmountCurrencyCode").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.TransactionInfoShippingAmountValue).HasColumnName(@"TransactionInfoShippingAmountValue").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.TransactionInfoShippingDiscountAmountCurrencyCode).HasColumnName(@"TransactionInfoShippingDiscountAmountCurrencyCode").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.TransactionInfoShippingDiscountAmountValue).HasColumnName(@"TransactionInfoShippingDiscountAmountValue").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.TransactionInfoTransactionSubject).HasColumnName(@"TransactionInfoTransactionSubject").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.TransactionInfoTransactionNote).HasColumnName(@"TransactionInfoTransactionNote").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.TransactionInfoCustomField).HasColumnName(@"TransactionInfoCustomField").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.TransactionInfoProtectionEligibility).HasColumnName(@"TransactionInfoProtectionEligibility").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.PayerInfoAccountId).HasColumnName(@"PayerInfoAccountId").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.PayerInfoEmailAddress).HasColumnName(@"PayerInfoEmailAddress").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.PayerInfoPhoneNumberCountryCode).HasColumnName(@"PayerInfoPhoneNumberCountryCode").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.PayerInfoPhoneNumberNationalNumber).HasColumnName(@"PayerInfoPhoneNumberNationalNumber").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.PayerInfoAddressStatus).HasColumnName(@"PayerInfoAddressStatus").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.PayerInfoPayerStatus).HasColumnName(@"PayerInfoPayerStatus").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.PayerInfoPayerNameGivenName).HasColumnName(@"PayerInfoPayerNameGiven_name").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.PayerInfoPayerNameSurname).HasColumnName(@"PayerInfoPayerNameSurname").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.PayerInfoPayerNameAlternateFullName).HasColumnName(@"PayerInfoPayerNameAlternateFullName").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.PayerInfoCountryCode).HasColumnName(@"PayerInfoCountryCode").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.ShippingInfoName).HasColumnName(@"ShippingInfoName").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.ShippingInfoAddressLine1).HasColumnName(@"ShippingInfoAddressLine1").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.ShippingInfoAddressLine2).HasColumnName(@"ShippingInfoAddressLine2").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.ShippingInfoAddressCity).HasColumnName(@"ShippingInfoAddressCity").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.ShippingInfoAddressState).HasColumnName(@"ShippingInfoAddressState").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.ShippingInfoAddressCountryCode).HasColumnName(@"ShippingInfoAddressCountryCode").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.ShippingInfoAddressPostalCode).HasColumnName(@"ShippingInfoAddressPostalCode").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().Property<string>(x => x.ShopMark).HasColumnName(@"ShopMark").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetail>().HasKey(@"Id");
        }

        partial void CustomizeBnsPaypalTransactionDetailMapping(ModelBuilder modelBuilder);

        #endregion

        #region BnsPaypalTransactionDetailsCartInfo Mapping

        private void BnsPaypalTransactionDetailsCartInfoMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<BnsPaypalTransactionDetailsCartInfo>().ToTable(@"Bns_PaypalTransactionDetailsCartInfo", @"dbo");
            modelBuilder.Entity<BnsPaypalTransactionDetailsCartInfo>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<BnsPaypalTransactionDetailsCartInfo>().Property<string>(x => x.CartInfoItemDetailsItemCode).HasColumnName(@"CartInfoItemDetailsItemCode").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetailsCartInfo>().Property<string>(x => x.CartInfoItemDetailsItemName).HasColumnName(@"CartInfoItemDetailsItemName").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetailsCartInfo>().Property<string>(x => x.CartInfoItemDetailsItemDescription).HasColumnName(@"CartInfoItemDetailsItemDescription").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetailsCartInfo>().Property<string>(x => x.CartInfoItemDetailsItemQuantity).HasColumnName(@"CartInfoItemDetailsItemQuantity").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetailsCartInfo>().Property<string>(x => x.CartInfoItemDetailsItemUnitPriceCurrencyCode).HasColumnName(@"CartInfoItemDetailsItemUnitPriceCurrencyCode").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetailsCartInfo>().Property<string>(x => x.CartInfoItemDetailsItemUnitPriceValue).HasColumnName(@"CartInfoItemDetailsItemUnitPriceValue").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetailsCartInfo>().Property<string>(x => x.CartInfoItemDetailsItemAmountCurrencyCode).HasColumnName(@"CartInfoItemDetailsItemAmountCurrencyCode").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetailsCartInfo>().Property<string>(x => x.CartInfoItemDetailsItemAmountValue).HasColumnName(@"CartInfoItemDetailsItemAmountValue").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetailsCartInfo>().Property<string>(x => x.CartInfoItemDetailsTaxAmountTaxAmountCurrencyCode).HasColumnName(@"CartInfoItemDetailsTaxAmountTaxAmountCurrencyCode").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetailsCartInfo>().Property<string>(x => x.CartInfoItemDetailsTaxAmountTaxAmountValue).HasColumnName(@"CartInfoItemDetailsTaxAmountTaxAmountValue").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetailsCartInfo>().Property<string>(x => x.CartInfoItemDetailsTotalItemAmountCurrencyCode).HasColumnName(@"CartInfoItemDetailsTotalItemAmountCurrencyCode").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetailsCartInfo>().Property<string>(x => x.CartInfoItemDetailsTotalItemAmountValue).HasColumnName(@"CartInfoItemDetailsTotalItemAmountValue").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetailsCartInfo>().Property<string>(x => x.CartInfoItemDetailsInvoiceNumber).HasColumnName(@"CartInfoItemDetailsInvoiceNumber").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsPaypalTransactionDetailsCartInfo>().Property<int?>(@"TransactionInfoId").HasColumnName(@"TransactionInfoId").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<BnsPaypalTransactionDetailsCartInfo>().HasKey(@"Id");
        }

        partial void CustomizeBnsPaypalTransactionDetailsCartInfoMapping(ModelBuilder modelBuilder);

        #endregion

        #region BnsSendDeliverdToEc Mapping

        private void BnsSendDeliverdToEcMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<BnsSendDeliverdToEc>().ToTable(@"Bns_SendDeliverdToEc", @"dbo");
            modelBuilder.Entity<BnsSendDeliverdToEc>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<BnsSendDeliverdToEc>().Property<string>(x => x.ShippingMethodNo).HasColumnName(@"ShippingMethodNo").HasColumnType(@"varchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<BnsSendDeliverdToEc>().Property<System.DateTime?>(x => x.PlatformShipTime).HasColumnName(@"PlatformShipTime").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<BnsSendDeliverdToEc>().Property<string>(x => x.DeliveredStatus).HasColumnName(@"DeliveredStatus").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsSendDeliverdToEc>().Property<System.DateTime?>(x => x.DeliveredTime).HasColumnName(@"DeliveredTime").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<BnsSendDeliverdToEc>().Property<string>(x => x.ResidenceTime).HasColumnName(@"ResidenceTime").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsSendDeliverdToEc>().Property<string>(x => x.TransportationTime).HasColumnName(@"TransportationTime").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsSendDeliverdToEc>().Property<string>(x => x.LogisticsDetails).HasColumnName(@"LogisticsDetails").HasColumnType(@"text").ValueGeneratedNever().HasMaxLength(2147483647);
            modelBuilder.Entity<BnsSendDeliverdToEc>().Property<string>(x => x.Trackinfo).HasColumnName(@"Trackinfo").HasColumnType(@"text").ValueGeneratedNever().HasMaxLength(2147483647);
            modelBuilder.Entity<BnsSendDeliverdToEc>().Property<string>(@"SalesorderId").HasColumnName(@"SalesorderId").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<BnsSendDeliverdToEc>().Property<string>(x => x.Ispush).HasColumnName(@"Ispush").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsSendDeliverdToEc>().Property<string>(@"OrderId").HasColumnName(@"OrderId").HasColumnType(@"nvarchar(64)").ValueGeneratedNever().HasMaxLength(64);
            modelBuilder.Entity<BnsSendDeliverdToEc>().Property<string>(x => x.Status).HasColumnName(@"Status").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsSendDeliverdToEc>().HasKey(@"Id");
        }

        partial void CustomizeBnsSendDeliverdToEcMapping(ModelBuilder modelBuilder);

        #endregion

        #region BnsShippingEcToTrackingMore Mapping

        private void BnsShippingEcToTrackingMoreMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<BnsShippingEcToTrackingMore>().ToTable(@"Bns_ShippingEcToTrackingMore", @"dbo");
            modelBuilder.Entity<BnsShippingEcToTrackingMore>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<BnsShippingEcToTrackingMore>().Property<string>(x => x.Shiping).HasColumnName(@"Shiping").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsShippingEcToTrackingMore>().Property<string>(x => x.ServerName).HasColumnName(@"ServerName").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsShippingEcToTrackingMore>().Property<string>(x => x.TrackingMoreCode).HasColumnName(@"TrackingMoreCode").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsShippingEcToTrackingMore>().HasKey(@"Id");
        }

        partial void CustomizeBnsShippingEcToTrackingMoreMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECAliexpressLoaninfo Mapping

        private void ECAliexpressLoaninfoMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECAliexpressLoaninfo>().ToTable(@"EC_AliexpressLoaninfo", @"dbo");
            modelBuilder.Entity<ECAliexpressLoaninfo>().Property<int>(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ECAliexpressLoaninfo>().Property<string>(x => x.PlateformCode).HasColumnName(@"PlateformCode").HasColumnType(@"varchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<ECAliexpressLoaninfo>().Property<string>(x => x.StoreName).HasColumnName(@"StoreName").HasColumnType(@"varchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<ECAliexpressLoaninfo>().Property<string>(x => x.FkType).HasColumnName(@"FkType").HasColumnType(@"varchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<ECAliexpressLoaninfo>().Property<string>(x => x.FkDATE).HasColumnName(@"FkDATE").HasColumnType(@"varchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<ECAliexpressLoaninfo>().Property<string>(x => x.Currency).HasColumnName(@"Currency").HasColumnType(@"varchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<ECAliexpressLoaninfo>().Property<decimal?>(x => x.FkAmount).HasColumnName(@"FkAmount").HasColumnType(@"money").ValueGeneratedNever();
            modelBuilder.Entity<ECAliexpressLoaninfo>().Property<System.DateTime?>(x => x.Enterdate).HasColumnName(@"enterdate").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"getdate()");
            modelBuilder.Entity<ECAliexpressLoaninfo>().HasKey(@"Id");
        }

        partial void CustomizeECAliexpressLoaninfoMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECDHCost Mapping

        private void ECDHCostMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECDHCost>().ToTable(@"EC_DHCost", @"dbo");
            modelBuilder.Entity<ECDHCost>().Property<int>(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ECDHCost>().Property<string>(x => x.Month).HasColumnName(@"Month").HasColumnType(@"varchar(20)").ValueGeneratedNever().HasMaxLength(20);
            modelBuilder.Entity<ECDHCost>().Property<string>(x => x.ProductSKU).HasColumnName(@"ProductSKU").HasColumnType(@"varchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<ECDHCost>().Property<decimal?>(x => x.Price).HasColumnName(@"price").HasColumnType(@"money").ValueGeneratedNever();
            modelBuilder.Entity<ECDHCost>().Property<System.DateTime?>(x => x.Enterdate).HasColumnName(@"enterdate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ECDHCost>().HasKey(@"Id");
        }

        partial void CustomizeECDHCostMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECRepeatCust Mapping

        private void ECRepeatCustMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECRepeatCust>().ToTable(@"EC_RepeatCust", @"dbo");
            modelBuilder.Entity<ECRepeatCust>().Property<int>(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ECRepeatCust>().Property<string>(x => x.PlateForm).HasColumnName(@"PlateForm").HasColumnType(@"varchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<ECRepeatCust>().Property<string>(x => x.StoreName).HasColumnName(@"StoreName").HasColumnType(@"varchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<ECRepeatCust>().Property<string>(x => x.DealMonth).HasColumnName(@"DealMonth").HasColumnType(@"varchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<ECRepeatCust>().Property<string>(x => x.Email).HasColumnName(@"Email").HasColumnType(@"varchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<ECRepeatCust>().Property<string>(x => x.PlateFormCode).HasColumnName(@"PlateFormCode").HasColumnType(@"varchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<ECRepeatCust>().Property<decimal?>(x => x.Amount).HasColumnName(@"Amount").HasColumnType(@"money").ValueGeneratedNever();
            modelBuilder.Entity<ECRepeatCust>().Property<System.DateTime?>(x => x.FkDate).HasColumnName(@"FkDate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ECRepeatCust>().Property<string>(x => x.FkType).HasColumnName(@"FkType").HasColumnType(@"varchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<ECRepeatCust>().Property<System.DateTime?>(x => x.Enterdate).HasColumnName(@"Enterdate").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<ECRepeatCust>().HasKey(@"Id");
        }

        partial void CustomizeECRepeatCustMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECShippingMethod Mapping

        private void ECShippingMethodMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECShippingMethod>().ToTable(@"EC_ShippingMethod", @"dbo");
            modelBuilder.Entity<ECShippingMethod>().Property<int>(x => x.SmId).HasColumnName(@"sm_id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ECShippingMethod>().Property<string>(x => x.SmCode).HasColumnName(@"sm_code").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShippingMethod>().Property<string>(x => x.SmName).HasColumnName(@"sm_name").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShippingMethod>().Property<string>(x => x.SmNameCn).HasColumnName(@"sm_name_cn").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShippingMethod>().Property<string>(x => x.SmCarrierName).HasColumnName(@"sm_carrier_name").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShippingMethod>().Property<string>(x => x.SmCarrierNameCn).HasColumnName(@"sm_carrier_name_cn").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECShippingMethod>().HasKey(@"SmId");
        }

        partial void CustomizeECShippingMethodMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECUser Mapping

        private void ECUserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECUser>().ToTable(@"EC_User", @"dbo");
            modelBuilder.Entity<ECUser>().Property<int>(x => x.UserId).HasColumnName(@"user_id").HasColumnType(@"int").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ECUser>().Property<string>(x => x.UserCode).HasColumnName(@"user_code").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECUser>().Property<string>(x => x.UserName).HasColumnName(@"user_name").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECUser>().Property<string>(x => x.UserNameEn).HasColumnName(@"user_name_en").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECUser>().HasKey(@"UserId");
        }

        partial void CustomizeECUserMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECOrderInfo Mapping

        private void ECOrderInfoMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECOrderInfo>().ToTable(@"EC_OrderInfo", @"dbo");
            modelBuilder.Entity<ECOrderInfo>().Property<string>(x => x.OrderCode).HasColumnName(@"orderCode").HasColumnType(@"varchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfo>().Property<string>(x => x.OrderLog).HasColumnName(@"orderLog").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfo>().Property<string>(x => x.OrderStatus).HasColumnName(@"orderStatus").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfo>().Property<string>(x => x.OpNode).HasColumnName(@"opNode").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfo>().Property<string>(x => x.Product).HasColumnName(@"product").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfo>().Property<string>(x => x.Order).HasColumnName(@"order").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfo>().Property<string>(x => x.OrderAddress).HasColumnName(@"orderAddress").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfo>().Property<string>(x => x.PackingList).HasColumnName(@"packingList").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfo>().Property<string>(x => x.BbServiceProviderCurrency).HasColumnName(@"bb_service_provider_currency").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfo>().Property<string>(x => x.OrderTrack).HasColumnName(@"orderTrack").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfo>().Property<string>(x => x.SyncConfirmShipStatusArr).HasColumnName(@"syncConfirmShipStatusArr").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfo>().Property<string>(x => x.OdaTypeArr).HasColumnName(@"odaTypeArr").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfo>().HasKey(@"OrderCode");
        }

        partial void CustomizeECOrderInfoMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECOrderInfoBarcode Mapping

        private void ECOrderInfoBarcodeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECOrderInfoBarcode>().ToTable(@"EC_OrderInfoBarcode", @"dbo");
            modelBuilder.Entity<ECOrderInfoBarcode>().Property<int>(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ECOrderInfoBarcode>().Property<string>(x => x.WarehouseProductBarcode).HasColumnName(@"warehouse_product_barcode").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoBarcode>().Property<string>(x => x.WarehouseDesc).HasColumnName(@"warehouse_desc").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoBarcode>().Property<string>(x => x.WarehouseCode).HasColumnName(@"warehouse_code").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoBarcode>().HasKey(@"Id");
        }

        partial void CustomizeECOrderInfoBarcodeMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECOrderInfoOdaTypeArr Mapping

        private void ECOrderInfoOdaTypeArrMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECOrderInfoOdaTypeArr>().ToTable(@"EC_OrderInfoOdaTypeArr", @"dbo");
            modelBuilder.Entity<ECOrderInfoOdaTypeArr>().Property<int>(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ECOrderInfoOdaTypeArr>().Property<string>(@"OrderCode").HasColumnName(@"order_code").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOdaTypeArr>().Property<string>(x => x._0).HasColumnName(@"0").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOdaTypeArr>().Property<string>(x => x._1).HasColumnName(@"1").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOdaTypeArr>().Property<string>(x => x._2).HasColumnName(@"2").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOdaTypeArr>().HasKey(@"Id");
        }

        partial void CustomizeECOrderInfoOdaTypeArrMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECOrderInfoOpNode Mapping

        private void ECOrderInfoOpNodeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECOrderInfoOpNode>().ToTable(@"EC_OrderInfoOpNode", @"dbo");
            modelBuilder.Entity<ECOrderInfoOpNode>().Property<string>(x => x.OpNode).HasColumnName(@"OpNode").HasColumnType(@"varchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOpNode>().Property<string>(x => x.OrderId).HasColumnName(@"order_id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOpNode>().Property<string>(@"OrderCode").HasColumnName(@"order_code").HasColumnType(@"varchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOpNode>().Property<string>(x => x.OotCode).HasColumnName(@"oot_code").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOpNode>().Property<string>(x => x.OonNote).HasColumnName(@"oon_note").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOpNode>().Property<string>(x => x.OonAddTime).HasColumnName(@"oon_add_time").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOpNode>().Property<string>(x => x.UserId).HasColumnName(@"user_id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOpNode>().Property<string>(x => x.UserName).HasColumnName(@"user_name").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOpNode>().Property<string>(x => x.OotName).HasColumnName(@"oot_name").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOpNode>().Property<string>(x => x.OotNameEn).HasColumnName(@"oot_name_en").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOpNode>().HasKey(@"OpNode");
        }

        partial void CustomizeECOrderInfoOpNodeMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECOrderInfoOrder Mapping

        private void ECOrderInfoOrderMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECOrderInfoOrder>().ToTable(@"EC_OrderInfoOrder", @"dbo");
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.OrderId).HasColumnName(@"order_id").HasColumnType(@"varchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(@"OrderCode").HasColumnName(@"order_code").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.CustomerId).HasColumnName(@"customer_id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.CustomerCode).HasColumnName(@"customer_code").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.Platform).HasColumnName(@"platform").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.OrderPlatformType).HasColumnName(@"order_platform_type").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.OrderPlatformCode).HasColumnName(@"order_platform_code").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.CreateType).HasColumnName(@"create_type").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.WarehouseId).HasColumnName(@"warehouse_id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.ToWarehouseId).HasColumnName(@"to_warehouse_id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.OrderType).HasColumnName(@"order_type").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.CountryCode).HasColumnName(@"country_code").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.SmCode).HasColumnName(@"sm_code").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.ParcelDeclaredValue).HasColumnName(@"parcel_declared_value").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.DeclaredWeight).HasColumnName(@"declared_weight").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.ShippingFeeEstimate).HasColumnName(@"shipping_fee_estimate").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.CurrencyCode).HasColumnName(@"currency_code").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.ParcelContents).HasColumnName(@"parcel_contents").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.ParcelQuantity).HasColumnName(@"parcel_quantity").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.OrderStatus).HasColumnName(@"order_status").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.OrderOutboundStatus).HasColumnName(@"order_outbound_status").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.OrderHoldInventory).HasColumnName(@"order_hold_inventory").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.OrderHoldStatus).HasColumnName(@"order_hold_status").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.OrderExceptionStatus).HasColumnName(@"order_exception_status").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.ProblemStatus).HasColumnName(@"problem_status").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.UnderreviewStatus).HasColumnName(@"underreview_status").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.InterceptStatus).HasColumnName(@"intercept_status").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.SyncCostStatus).HasColumnName(@"sync_cost_status").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.SyncStatus).HasColumnName(@"sync_status").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.OrderWaitingStatus).HasColumnName(@"order_waiting_status").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.PrintSort).HasColumnName(@"print_sort").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.PrintQuantity).HasColumnName(@"print_quantity").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.AddTime).HasColumnName(@"add_time").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.UpdateTime).HasColumnName(@"update_time").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.OrderPaydate).HasColumnName(@"order_paydate").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.OrderPickType).HasColumnName(@"order_pick_type").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.ReferenceNo).HasColumnName(@"reference_no").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.PickerId).HasColumnName(@"picker_id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.PickingBasket).HasColumnName(@"picking_basket").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.Remark).HasColumnName(@"remark").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.SiteId).HasColumnName(@"site_id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.SellerId).HasColumnName(@"seller_id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.PlatformSellerId).HasColumnName(@"platform_seller_id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.SyncServiceStatus).HasColumnName(@"sync_service_status").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.SyncCount).HasColumnName(@"sync_count").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.SyncConfirmshipStatus).HasColumnName(@"sync_confirmship_status").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.SyncExpressStatus).HasColumnName(@"sync_express_status").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.SyncExpressShip).HasColumnName(@"sync_express_ship").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.SyncRequiredSign).HasColumnName(@"sync_required_sign").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.OperatorNote).HasColumnName(@"operator_note").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.SyncWmsStatus).HasColumnName(@"sync_wms_status").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.SyncWmsSign).HasColumnName(@"sync_wms_sign").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.SyncWmsTime).HasColumnName(@"sync_wms_time").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.CheckShippingMethod).HasColumnName(@"check_shipping_method").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.AnewExpressStatus).HasColumnName(@"anew_express_status").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.RefTrackingNumber).HasColumnName(@"ref_tracking_number").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.OrderAdvancePickup).HasColumnName(@"order_advance_pickup").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.FbaFee).HasColumnName(@"fba_fee").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.CreateUserId).HasColumnName(@"create_user_id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.IsOda).HasColumnName(@"is_oda").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.OdaType).HasColumnName(@"oda_type").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.IsFba).HasColumnName(@"is_fba").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.IsShared).HasColumnName(@"is_shared").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.IsImportLabel).HasColumnName(@"is_import_label").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.UserAccount).HasColumnName(@"user_account").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.PlatformUserName).HasColumnName(@"platform_user_name").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.WarehouseCode).HasColumnName(@"warehouse_code").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<string>(x => x.Picker).HasColumnName(@"picker").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrder>().Property<int?>(@"ShipId").HasColumnName(@"ship_id").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECOrderInfoOrder>().HasKey(@"OrderId");
        }

        partial void CustomizeECOrderInfoOrderMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECOrderInfoOrderLog Mapping

        private void ECOrderInfoOrderLogMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECOrderInfoOrderLog>().ToTable(@"EC_OrderInfoOrderLog", @"dbo");
            modelBuilder.Entity<ECOrderInfoOrderLog>().Property<string>(x => x.OlId).HasColumnName(@"ol_id").HasColumnType(@"varchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrderLog>().Property<string>(x => x.OrderId).HasColumnName(@"order_id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrderLog>().Property<string>(@"OrderCode").HasColumnName(@"order_code").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrderLog>().Property<string>(x => x.OlType).HasColumnName(@"ol_type").HasColumnType(@"varchar(4000)").ValueGeneratedNever().HasMaxLength(4000);
            modelBuilder.Entity<ECOrderInfoOrderLog>().Property<string>(x => x.OrderStatusFrom).HasColumnName(@"order_status_from").HasColumnType(@"varchar(4000)").ValueGeneratedNever().HasMaxLength(4000);
            modelBuilder.Entity<ECOrderInfoOrderLog>().Property<string>(x => x.OrderStatusTo).HasColumnName(@"order_status_to").HasColumnType(@"varchar(4000)").ValueGeneratedNever().HasMaxLength(4000);
            modelBuilder.Entity<ECOrderInfoOrderLog>().Property<string>(x => x.OlAddTime).HasColumnName(@"ol_add_time").HasColumnType(@"varchar(4000)").ValueGeneratedNever().HasMaxLength(4000);
            modelBuilder.Entity<ECOrderInfoOrderLog>().Property<string>(x => x.UserId).HasColumnName(@"user_id").HasColumnType(@"varchar(4000)").ValueGeneratedNever().HasMaxLength(4000);
            modelBuilder.Entity<ECOrderInfoOrderLog>().Property<string>(x => x.OlIp).HasColumnName(@"ol_ip").HasColumnType(@"varchar(4000)").ValueGeneratedNever().HasMaxLength(4000);
            modelBuilder.Entity<ECOrderInfoOrderLog>().Property<string>(x => x.OlComments).HasColumnName(@"ol_comments").HasColumnType(@"varchar(4000)").ValueGeneratedNever().HasMaxLength(4000);
            modelBuilder.Entity<ECOrderInfoOrderLog>().Property<string>(x => x.UserName).HasColumnName(@"user_name").HasColumnType(@"varchar(4000)").ValueGeneratedNever().HasMaxLength(4000);
            modelBuilder.Entity<ECOrderInfoOrderLog>().HasKey(@"OlId");
        }

        partial void CustomizeECOrderInfoOrderLogMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECOrderInfoProduct Mapping

        private void ECOrderInfoProductMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECOrderInfoProduct>().ToTable(@"EC_OrderInfoProduct", @"dbo");
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.OpId).HasColumnName(@"op_id").HasColumnType(@"varchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.OrderId).HasColumnName(@"order_id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(@"OrderCode").HasColumnName(@"order_code").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.ProductId).HasColumnName(@"product_id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.ProductBarcode).HasColumnName(@"product_barcode").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.OpOos).HasColumnName(@"op_oos").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.OpOosDays).HasColumnName(@"op_oos_days").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.OpQuantity).HasColumnName(@"op_quantity").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.OpInventory).HasColumnName(@"op_inventory").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.OpFinalValueFee).HasColumnName(@"op_final_value_fee").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.OpPaypalFee).HasColumnName(@"op_paypal_fee").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.OpSalesPrice).HasColumnName(@"op_sales_price").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.OpDeclaredValue).HasColumnName(@"op_declared_value").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.OpDeclaredWeight).HasColumnName(@"op_declared_weight").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.OpCategory).HasColumnName(@"op_category").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.OpRecvAccount).HasColumnName(@"op_recv_account").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.OpRefTnx).HasColumnName(@"op_ref_tnx").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.OpRefItemId).HasColumnName(@"op_ref_item_id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.OpRefBuyerId).HasColumnName(@"op_ref_buyer_id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.OpRefPaydate).HasColumnName(@"op_ref_paydate").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.OpAddTime).HasColumnName(@"op_add_time").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.OpUpdateTime).HasColumnName(@"op_update_time").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.ItemListType).HasColumnName(@"item_list_type").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.OpFbaFee).HasColumnName(@"op_fba_fee").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.OpOtherFee).HasColumnName(@"op_other_fee").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.OpPlatformSalesSku).HasColumnName(@"op_platform_sales_sku").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.OpPlatformSalesQuantity).HasColumnName(@"op_platform_sales_quantity").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.OpShippingFee).HasColumnName(@"op_shipping_fee").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.ProductWeight).HasColumnName(@"product_weight").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.ProductHeight).HasColumnName(@"product_height").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.ProductLength).HasColumnName(@"product_length").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.ProductWidth).HasColumnName(@"product_width").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<string>(x => x.ProductTitle).HasColumnName(@"product_title").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoProduct>().Property<int?>(@"BarcodeCodeId").HasColumnName(@"barcode_code_id").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECOrderInfoProduct>().HasKey(@"OpId");
        }

        partial void CustomizeECOrderInfoProductMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECOrderInfoShip Mapping

        private void ECOrderInfoShipMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECOrderInfoShip>().ToTable(@"EC_OrderInfoShip", @"dbo");
            modelBuilder.Entity<ECOrderInfoShip>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ECOrderInfoShip>().Property<string>(x => x.TrackingNumber).HasColumnName(@"tracking_number").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoShip>().Property<string>(x => x.ServiceNumberConvert).HasColumnName(@"service_number_convert").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoShip>().Property<string>(x => x.ServiceNumber).HasColumnName(@"service_number").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoShip>().Property<string>(x => x.SoWeight).HasColumnName(@"so_weight").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoShip>().Property<string>(x => x.SoShippingFee).HasColumnName(@"so_shipping_fee").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoShip>().Property<string>(x => x.CurrencyCode).HasColumnName(@"currency_code").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoShip>().HasKey(@"Id");
        }

        partial void CustomizeECOrderInfoShipMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECOrderInfoOrderStatu Mapping

        private void ECOrderInfoOrderStatuMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECOrderInfoOrderStatu>().ToTable(@"EC_OrderInfoOrderStatus", @"dbo");
            modelBuilder.Entity<ECOrderInfoOrderStatu>().Property<string>(x => x.OrderCode).HasColumnName(@"order_code").HasColumnType(@"varchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrderStatu>().Property<string>(x => x._0).HasColumnName(@"0").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrderStatu>().Property<string>(x => x._1).HasColumnName(@"1").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrderStatu>().Property<string>(x => x._2).HasColumnName(@"2").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrderStatu>().Property<string>(x => x._3).HasColumnName(@"3").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrderStatu>().Property<string>(x => x._4).HasColumnName(@"4").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrderStatu>().Property<string>(x => x._5).HasColumnName(@"5").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrderStatu>().Property<string>(x => x._7).HasColumnName(@"7").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrderStatu>().Property<string>(x => x._8).HasColumnName(@"8").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrderStatu>().Property<string>(x => x._9).HasColumnName(@"9").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrderStatu>().Property<string>(x => x._10).HasColumnName(@"10").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoOrderStatu>().HasKey(@"OrderCode");
        }

        partial void CustomizeECOrderInfoOrderStatuMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECOrderInfoAddrCountry Mapping

        private void ECOrderInfoAddrCountryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECOrderInfoAddrCountry>().ToTable(@"EC_OrderInfoAddrCountry", @"dbo");
            modelBuilder.Entity<ECOrderInfoAddrCountry>().Property<string>(x => x.CountryId).HasColumnName(@"country_id").HasColumnType(@"varchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAddrCountry>().Property<string>(x => x.CountryName).HasColumnName(@"country_name").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAddrCountry>().Property<string>(x => x.CountryNameEn).HasColumnName(@"country_name_en").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAddrCountry>().Property<string>(x => x.CountryLocalName).HasColumnName(@"country_local_name").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAddrCountry>().Property<string>(x => x.CountryAlias).HasColumnName(@"country_alias").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAddrCountry>().Property<string>(x => x.CountryCode).HasColumnName(@"country_code").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAddrCountry>().Property<string>(x => x.CountryCodeIso).HasColumnName(@"country_code_iso").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAddrCountry>().Property<string>(x => x.CountryNum).HasColumnName(@"country_num").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAddrCountry>().Property<string>(x => x.CountrySort).HasColumnName(@"country_sort").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAddrCountry>().Property<string>(x => x.CountryShortName).HasColumnName(@"country_short_name").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAddrCountry>().Property<string>(x => x.TradeCountry).HasColumnName(@"trade_country").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAddrCountry>().Property<string>(x => x.CountryMatch).HasColumnName(@"country_match").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAddrCountry>().Property<string>(x => x.CountryStatus).HasColumnName(@"country_status").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAddrCountry>().Property<string>(x => x.CountryUpdateTime).HasColumnName(@"country_update_time").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAddrCountry>().HasKey(@"CountryId");
        }

        partial void CustomizeECOrderInfoAddrCountryMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECOrderInfoAdress Mapping

        private void ECOrderInfoAdressMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECOrderInfoAdress>().ToTable(@"EC_OrderInfoAdress", @"dbo");
            modelBuilder.Entity<ECOrderInfoAdress>().Property<string>(x => x.OabId).HasColumnName(@"oab_id").HasColumnType(@"varchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAdress>().Property<int?>(x => x.OrderId).HasColumnName(@"order_id").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECOrderInfoAdress>().Property<string>(@"OrderCode").HasColumnName(@"order_code").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAdress>().Property<string>(x => x.OabFirstname).HasColumnName(@"oab_firstname").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAdress>().Property<string>(x => x.OabLastname).HasColumnName(@"oab_lastname").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAdress>().Property<string>(x => x.OabCompany).HasColumnName(@"oab_company").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAdress>().Property<string>(x => x.OabCountryId).HasColumnName(@"oab_country_id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAdress>().Property<string>(x => x.OabZoneId).HasColumnName(@"oab_zone_id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAdress>().Property<string>(x => x.OabPostcode).HasColumnName(@"oab_postcode").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAdress>().Property<string>(x => x.OabState).HasColumnName(@"oab_state").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAdress>().Property<string>(x => x.OabCity).HasColumnName(@"oab_city").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAdress>().Property<string>(x => x.OabSuburb).HasColumnName(@"oab_suburb").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAdress>().Property<string>(x => x.OabStreetAddress1).HasColumnName(@"oab_street_address1").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAdress>().Property<string>(x => x.OabStreetAddress2).HasColumnName(@"oab_street_address2").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAdress>().Property<string>(x => x.OabDoorplate).HasColumnName(@"oab_doorplate").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAdress>().Property<string>(x => x.OabPhone).HasColumnName(@"oab_phone").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAdress>().Property<string>(x => x.OabCellPhone).HasColumnName(@"oab_cell_phone").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAdress>().Property<string>(x => x.OabFax).HasColumnName(@"oab_fax").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAdress>().Property<string>(x => x.OabEmail).HasColumnName(@"oab_email").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAdress>().Property<string>(x => x.OabNote).HasColumnName(@"oab_note").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAdress>().Property<string>(x => x.OabUpdateTime).HasColumnName(@"oab_update_time").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAdress>().Property<string>(@"Country").HasColumnName(@"country").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoAdress>().HasKey(@"OabId");
        }

        partial void CustomizeECOrderInfoAdressMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECOrderInfoPackageInfo Mapping

        private void ECOrderInfoPackageInfoMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECOrderInfoPackageInfo>().ToTable(@"EC_OrderInfoPackageInfo", @"dbo");
            modelBuilder.Entity<ECOrderInfoPackageInfo>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ECOrderInfoPackageInfo>().Property<string>(x => x.WarehouseId).HasColumnName(@"warehouse_id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageInfo>().Property<string>(x => x.PpuCode).HasColumnName(@"ppu_code").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageInfo>().Property<string>(x => x.CustomerCode).HasColumnName(@"customer_code").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageInfo>().Property<string>(x => x.CustomerId).HasColumnName(@"customer_id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageInfo>().Property<string>(x => x.PpBarcode).HasColumnName(@"pp_barcode").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageInfo>().Property<string>(x => x.PpType).HasColumnName(@"pp_type").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageInfo>().Property<string>(x => x.PpStatus).HasColumnName(@"pp_status").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageInfo>().Property<string>(x => x.PpActionType).HasColumnName(@"pp_action_type").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageInfo>().Property<string>(x => x.PpQuantity).HasColumnName(@"pp_quantity").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageInfo>().Property<string>(x => x.PpCost).HasColumnName(@"pp_cost").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageInfo>().Property<string>(x => x.CurrencyCode).HasColumnName(@"currency_code").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageInfo>().Property<string>(x => x.PpName).HasColumnName(@"pp_name").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageInfo>().Property<string>(x => x.PpLength).HasColumnName(@"pp_length").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageInfo>().Property<string>(x => x.PpNameEn).HasColumnName(@"pp_name_en").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageInfo>().Property<string>(x => x.PpHeight).HasColumnName(@"pp_height").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageInfo>().Property<string>(x => x.PpWidth).HasColumnName(@"pp_width").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageInfo>().Property<string>(x => x.PpWeight).HasColumnName(@"pp_weight").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageInfo>().Property<string>(x => x.PpAddTime).HasColumnName(@"pp_add_time").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageInfo>().Property<string>(x => x.PpUpdateTime).HasColumnName(@"pp_update_time").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageInfo>().Property<string>(x => x.PpPath).HasColumnName(@"pp_path").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageInfo>().HasKey(@"Id");
        }

        partial void CustomizeECOrderInfoPackageInfoMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECOrderInfoPackageList Mapping

        private void ECOrderInfoPackageListMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECOrderInfoPackageList>().ToTable(@"EC_OrderInfoPackageList", @"dbo");
            modelBuilder.Entity<ECOrderInfoPackageList>().Property<string>(x => x.TppId).HasColumnName(@"tpp_id").HasColumnType(@"varchar(255)").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageList>().Property<string>(x => x.TppCode).HasColumnName(@"tpp_code").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageList>().Property<string>(x => x.TppSn).HasColumnName(@"tpp_sn").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageList>().Property<string>(x => x.ReferenceNo).HasColumnName(@"reference_no").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageList>().Property<string>(x => x.TptCode).HasColumnName(@"tpt_code").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageList>().Property<string>(x => x.SmCode).HasColumnName(@"sm_code").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageList>().Property<string>(x => x.OrderId).HasColumnName(@"order_id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageList>().Property<string>(@"OrderCode").HasColumnName(@"order_code").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageList>().Property<string>(x => x.WarehouseId).HasColumnName(@"warehouse_id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageList>().Property<string>(x => x.ToWarehouseId).HasColumnName(@"to_warehouse_id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageList>().Property<string>(x => x.TppCreaterId).HasColumnName(@"tpp_creater_id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageList>().Property<string>(x => x.TppCompleteId).HasColumnName(@"tpp_complete_id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageList>().Property<string>(x => x.TppQuantity).HasColumnName(@"tpp_quantity").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageList>().Property<string>(x => x.TppLength).HasColumnName(@"tpp_length").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageList>().Property<string>(x => x.TppWidth).HasColumnName(@"tpp_width").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageList>().Property<string>(x => x.TppHeight).HasColumnName(@"tpp_height").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageList>().Property<string>(x => x.TppWeight).HasColumnName(@"tpp_weight").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageList>().Property<string>(x => x.TppNetWeight).HasColumnName(@"tpp_net_weight").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageList>().Property<string>(x => x.TppIsverify).HasColumnName(@"tpp_isverify").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageList>().Property<string>(x => x.TppStatus).HasColumnName(@"tpp_status").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageList>().Property<string>(x => x.TppReceivingStatus).HasColumnName(@"tpp_receiving_status").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageList>().Property<string>(x => x.TppIsbattery).HasColumnName(@"tpp_isbattery").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageList>().Property<string>(x => x.TppAddTime).HasColumnName(@"tpp_add_time").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageList>().Property<string>(x => x.TppUpdateTime).HasColumnName(@"tpp_update_time").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageList>().Property<string>(x => x.TppExcuteTime).HasColumnName(@"tpp_excute_time").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageList>().Property<string>(x => x.TppPutawayStatus).HasColumnName(@"tpp_putaway_status").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECOrderInfoPackageList>().Property<int?>(@"PackageInfoId").HasColumnName(@"package_info_id").HasColumnType(@"int").ValueGeneratedNever();
            modelBuilder.Entity<ECOrderInfoPackageList>().HasKey(@"TppId");
        }

        partial void CustomizeECOrderInfoPackageListMapping(ModelBuilder modelBuilder);

        #endregion

        #region ECRmaRefa Mapping

        private void ECRmaRefaMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ECRmaRefa>().ToTable(@"EC_RmaRefa", @"dbo");
            modelBuilder.Entity<ECRmaRefa>().Property<int>(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ECRmaRefa>().Property<string>(x => x.CreateDate).HasColumnName(@"create_date").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECRmaRefa>().Property<string>(x => x.CreateUser).HasColumnName(@"create_user").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECRmaRefa>().Property<string>(x => x.Note).HasColumnName(@"note").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECRmaRefa>().Property<string>(x => x.Reason).HasColumnName(@"reason").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECRmaRefa>().Property<string>(x => x.SellerAccount).HasColumnName(@"seller_account").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECRmaRefa>().Property<string>(x => x.BuyerId).HasColumnName(@"buyer_id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECRmaRefa>().Property<string>(x => x.OldOrderId).HasColumnName(@"old_order_id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECRmaRefa>().Property<string>(x => x.OldWarehouseOrderId).HasColumnName(@"old_warehouse_order_id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECRmaRefa>().Property<string>(x => x.RefrenceNoPlatform).HasColumnName(@"refrence_no_platform").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECRmaRefa>().Property<string>(x => x.RefrenceNoWarehouse).HasColumnName(@"refrence_no_warehouse").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECRmaRefa>().Property<string>(x => x.OrderStatus).HasColumnName(@"order_status").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECRmaRefa>().Property<string>(x => x.Country).HasColumnName(@"country").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECRmaRefa>().Property<string>(x => x.Sku).HasColumnName(@"sku").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECRmaRefa>().Property<string>(x => x.Qty).HasColumnName(@"qty").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECRmaRefa>().Property<string>(x => x.ProductTitle).HasColumnName(@"product_title").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECRmaRefa>().Property<string>(x => x.Price).HasColumnName(@"price").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECRmaRefa>().Property<string>(x => x.ProductSku).HasColumnName(@"product_sku").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECRmaRefa>().Property<string>(x => x.TransId).HasColumnName(@"trans_id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECRmaRefa>().Property<string>(x => x.AmountPaid).HasColumnName(@"amount_paid").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECRmaRefa>().Property<string>(x => x.AmountOrder).HasColumnName(@"amount_order").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECRmaRefa>().Property<string>(x => x.Currency).HasColumnName(@"currency").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECRmaRefa>().Property<string>(x => x.WarehousId).HasColumnName(@"warehous_id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECRmaRefa>().Property<string>(x => x.ShippingMethod).HasColumnName(@"shipping_method").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECRmaRefa>().Property<string>(x => x.CustomerServiceNote).HasColumnName(@"customer_service_note").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECRmaRefa>().Property<string>(x => x.Status).HasColumnName(@"status").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<ECRmaRefa>().HasKey(@"Id");
        }

        partial void CustomizeECRmaRefaMapping(ModelBuilder modelBuilder);

        #endregion

        #region BnsMgSalesChildOrder Mapping

        private void BnsMgSalesChildOrderMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<BnsMgSalesChildOrder>().ToTable(@"Bns_MgSalesChildOrder", @"dbo");
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<int>(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").ValueGeneratedOnAdd();
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.ItemId).HasColumnName(@"Item_Id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.OrderId).HasColumnName(@"Order_Id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.QuoteItemId).HasColumnName(@"Quote_Item_Id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.CreatedAt).HasColumnName(@"Created_At").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.UpdatedAt).HasColumnName(@"Updated_At").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.ProductId).HasColumnName(@"Product_Id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.ProductType).HasColumnName(@"Product_Type").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.ProductOptions).HasColumnName(@"Product_Options").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.Weight).HasColumnName(@"Weight").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.IsVirtual).HasColumnName(@"Is_Virtual").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.Sku).HasColumnName(@"Sku").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.Name).HasColumnName(@"Name").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.AppliedRuleIds).HasColumnName(@"Applied_Rule_Ids").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.FreeShipping).HasColumnName(@"Free_Shipping").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.IsQtyDecimal).HasColumnName(@"Is_Qty_Decimal").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.NoDiscount).HasColumnName(@"No_Discount").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.QtyCanceled).HasColumnName(@"Qty_Canceled").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.QtyInvoiced).HasColumnName(@"Qty_Invoiced").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255).HasDefaultValueSql(@"''");
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.QtyOrdered).HasColumnName(@"Qty_Ordered").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.QtyRefunded).HasColumnName(@"Qty_Refunded").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255).HasDefaultValueSql(@"''");
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.QtyShipped).HasColumnName(@"Qty_Shipped").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255).HasDefaultValueSql(@"''");
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.Cost).HasColumnName(@"Cost").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.Price).HasColumnName(@"Price").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.BasePrice).HasColumnName(@"Base_Price").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255).HasDefaultValueSql(@"''");
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.OriginalPrice).HasColumnName(@"Original_Price").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255).HasDefaultValueSql(@"''");
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.BaseOriginalPrice).HasColumnName(@"Base_Original_Price").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.TaxPercent).HasColumnName(@"Tax_Percent").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.TaxAmount).HasColumnName(@"Tax_Amount").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.BaseTaxAmount).HasColumnName(@"Base_Tax_Amount").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.TaxInvoiced).HasColumnName(@"Tax_Invoiced").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.BaseTaxInvoiced).HasColumnName(@"Base_Tax_Invoiced").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.DiscountPercent).HasColumnName(@"Discount_Percent").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.DiscountAmount).HasColumnName(@"Discount_Amount").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.BaseDiscountAmount).HasColumnName(@"Base_Discount_Amount").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.DiscountInvoiced).HasColumnName(@"Discount_Invoiced").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.BaseDiscountInvoiced).HasColumnName(@"Base_Discount_Invoiced").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.AmountRefunded).HasColumnName(@"Amount_Refunded").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.BaseAmountRefunded).HasColumnName(@"Base_Amount_Refunded").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.RowTotal).HasColumnName(@"Row_Total").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.BaseRowTotal).HasColumnName(@"Base_Row_Total").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.RowInvoiced).HasColumnName(@"Row_Invoiced").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.BaseRowInvoiced).HasColumnName(@"Base_Row_Invoiced").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.RowWeight).HasColumnName(@"Row_Weight").HasColumnType(@"varchar(255)").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.GiftMessageId).HasColumnName(@"Gift_Message_Id").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.GiftMessage).HasColumnName(@"Gift_Message").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.GiftMessageAvailable).HasColumnName(@"Gift_Message_Available").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.BaseTaxBeforeDiscount).HasColumnName(@"Base_Tax_Before_Discount").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.TaxBeforeDiscount).HasColumnName(@"Tax_Before_Discount").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.WeeeTaxApplied).HasColumnName(@"Weee_Tax_Applied").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.WeeeTaxAppliedAmount).HasColumnName(@"Weee_Tax_Applied_Amount").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.WeeeTaxAppliedRowAmount).HasColumnName(@"Weee_Tax_Applied_Row_Amount").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.BaseWeeeTaxAppliedAmount).HasColumnName(@"Base_Weee_Tax_Applied_Amount").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.BaseWeeeTaxAppliedRowAmount).HasColumnName(@"Base_Weee_Tax_Applied_Row_Amount").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.WeeeTaxDisposition).HasColumnName(@"Weee_Tax_Disposition").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.WeeeTaxRowDisposition).HasColumnName(@"Weee_Tax_Row_Disposition").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.BaseWeeeTaxDisposition).HasColumnName(@"Base_Weee_Tax_Disposition").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.BaseWeeeTaxRowDisposition).HasColumnName(@"Base_Weee_Tax_Row_Disposition").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.ShopMark).HasColumnName(@"Shop_Mark").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.EtlDate).HasColumnName(@"Etl_Date").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.EtlDatetime).HasColumnName(@"Etl_Datetime").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().Property<string>(x => x.EtlMonth).HasColumnName(@"Etl_Month").HasColumnType(@"varchar(255)").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<BnsMgSalesChildOrder>().HasKey(@"Id");
        }

        partial void CustomizeBnsMgSalesChildOrderMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {

        #region ResDepartment Navigation properties

            modelBuilder.Entity<ResDepartment>().HasMany(x => x.ChildrenDept).WithOne(op => op.ParentDept).IsRequired(false).HasForeignKey(@"ParentId");
            modelBuilder.Entity<ResDepartment>().HasOne(x => x.ParentDept).WithMany(op => op.ChildrenDept).IsRequired(false).HasForeignKey(@"ParentId");
            modelBuilder.Entity<ResDepartment>().HasMany(x => x.ResUsers).WithOne(op => op.ResDepartment).IsRequired(true).HasForeignKey(@"DeptId");

        #endregion

        #region ResRole Navigation properties

            modelBuilder.Entity<ResRole>().HasMany(x => x.ResUserRoles).WithOne(op => op.ResRole).IsRequired(true).HasForeignKey(@"RoleId");
            modelBuilder.Entity<ResRole>().HasMany(x => x.ResRolePermissions).WithOne(op => op.ResRole).IsRequired(true).HasForeignKey(@"RoleId");

        #endregion

        #region ResResource Navigation properties

            modelBuilder.Entity<ResResource>().HasMany(x => x.ResPermissions).WithOne(op => op.ResResource).IsRequired(true).HasForeignKey(@"ResResourceId");

        #endregion

        #region ResPermission Navigation properties

            modelBuilder.Entity<ResPermission>().HasOne(x => x.ResResource).WithMany(op => op.ResPermissions).IsRequired(true).HasForeignKey(@"ResResourceId");
            modelBuilder.Entity<ResPermission>().HasMany(x => x.ResRolePermissions).WithOne(op => op.ResPermission).IsRequired(true).HasForeignKey(@"PermissionId");
            modelBuilder.Entity<ResPermission>().HasMany(x => x.ResUserPermissions).WithOne(op => op.ResPermission).IsRequired(true).HasForeignKey(@"PermissionId");

        #endregion

        #region ResUser Navigation properties

            modelBuilder.Entity<ResUser>().HasOne(x => x.ResDepartment).WithMany(op => op.ResUsers).IsRequired(true).HasForeignKey(@"DeptId");
            modelBuilder.Entity<ResUser>().HasMany(x => x.ResUserRoles).WithOne(op => op.ResUser).IsRequired(true).HasForeignKey(@"UserId");
            modelBuilder.Entity<ResUser>().HasMany(x => x.ResUserPermissions).WithOne(op => op.ResUser).IsRequired(true).HasForeignKey(@"UserId");

        #endregion

        #region ResUserRole Navigation properties

            modelBuilder.Entity<ResUserRole>().HasOne(x => x.ResRole).WithMany(op => op.ResUserRoles).IsRequired(true).HasForeignKey(@"RoleId");
            modelBuilder.Entity<ResUserRole>().HasOne(x => x.ResUser).WithMany(op => op.ResUserRoles).IsRequired(true).HasForeignKey(@"UserId");

        #endregion

        #region ResRolePermission Navigation properties

            modelBuilder.Entity<ResRolePermission>().HasOne(x => x.ResRole).WithMany(op => op.ResRolePermissions).IsRequired(true).HasForeignKey(@"RoleId");
            modelBuilder.Entity<ResRolePermission>().HasOne(x => x.ResPermission).WithMany(op => op.ResRolePermissions).IsRequired(true).HasForeignKey(@"PermissionId");

        #endregion

        #region ResUserPermission Navigation properties

            modelBuilder.Entity<ResUserPermission>().HasOne(x => x.ResUser).WithMany(op => op.ResUserPermissions).IsRequired(true).HasForeignKey(@"UserId");
            modelBuilder.Entity<ResUserPermission>().HasOne(x => x.ResPermission).WithMany(op => op.ResUserPermissions).IsRequired(true).HasForeignKey(@"PermissionId");

        #endregion

        #region ECOrderConfigData Navigation properties

            modelBuilder.Entity<ECOrderConfigData>().HasMany(x => x.ECSalesOrders).WithOne(op => op.OrderConfigData).IsRequired(false).HasForeignKey(@"OriginalOrderId");

        #endregion

        #region ECProduct Navigation properties

            modelBuilder.Entity<ECProduct>().HasMany(x => x.ProductBoxes).WithOne(op => op.ECProduct).IsRequired(false).HasForeignKey(@"ProductSku");
            modelBuilder.Entity<ECProduct>().HasMany(x => x.ProductCombinations).WithOne(op => op.ECProduct).IsRequired(false).HasForeignKey(@"ProductSku");
            modelBuilder.Entity<ECProduct>().HasMany(x => x.ProductCustomCategories).WithOne(op => op.ECProduct).IsRequired(false).HasForeignKey(@"ProductSku");
            modelBuilder.Entity<ECProduct>().HasMany(x => x.ProductProperties).WithOne(op => op.ECProduct).IsRequired(false).HasForeignKey(@"ProductSku");

        #endregion

        #region ECProductBox Navigation properties

            modelBuilder.Entity<ECProductBox>().HasOne(x => x.ECProduct).WithMany(op => op.ProductBoxes).IsRequired(false).HasForeignKey(@"ProductSku");

        #endregion

        #region ECProductCombination Navigation properties

            modelBuilder.Entity<ECProductCombination>().HasOne(x => x.ECProduct).WithMany(op => op.ProductCombinations).IsRequired(false).HasForeignKey(@"ProductSku");
            modelBuilder.Entity<ECProductCombination>().HasMany(x => x.SubProducts).WithOne(op => op.ECProductCombination).IsRequired(false).HasForeignKey(@"ProductCombinationId");

        #endregion

        #region ECProductCustomCategory Navigation properties

            modelBuilder.Entity<ECProductCustomCategory>().HasOne(x => x.ECProduct).WithMany(op => op.ProductCustomCategories).IsRequired(false).HasForeignKey(@"ProductSku");

        #endregion

        #region ECProductProperty Navigation properties

            modelBuilder.Entity<ECProductProperty>().HasOne(x => x.ECProduct).WithMany(op => op.ProductProperties).IsRequired(false).HasForeignKey(@"ProductSku");

        #endregion

        #region ECSalesOrder Navigation properties

            modelBuilder.Entity<ECSalesOrder>().HasOne(x => x.SalesOrderAddress).WithMany(op => op.ECSalesOrders).IsRequired(false).HasForeignKey(@"ShippingAddressId");
            modelBuilder.Entity<ECSalesOrder>().HasOne(x => x.OrderConfigData).WithMany(op => op.ECSalesOrders).IsRequired(false).HasForeignKey(@"OriginalOrderId");
            modelBuilder.Entity<ECSalesOrder>().HasMany(x => x.OrderDetails).WithOne(op => op.ECSalesOrder).IsRequired(false).HasForeignKey(@"OrderId");
            modelBuilder.Entity<ECSalesOrder>().HasMany(x => x.BnsSendDeliverdToEcs).WithOne(op => op.ECSalesOrder).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"OrderId");

        #endregion

        #region ECSalesOrderAddress Navigation properties

            modelBuilder.Entity<ECSalesOrderAddress>().HasMany(x => x.ECSalesOrders).WithOne(op => op.SalesOrderAddress).IsRequired(false).HasForeignKey(@"ShippingAddressId");

        #endregion

        #region ECSubProduct Navigation properties

            modelBuilder.Entity<ECSubProduct>().HasOne(x => x.ECProductCombination).WithMany(op => op.SubProducts).IsRequired(false).HasForeignKey(@"ProductCombinationId");

        #endregion

        #region ECSalesOrderDetail Navigation properties

            modelBuilder.Entity<ECSalesOrderDetail>().HasOne(x => x.ECSalesOrder).WithMany(op => op.OrderDetails).IsRequired(false).HasForeignKey(@"OrderId");

        #endregion

        #region ECSkuRelation Navigation properties

            modelBuilder.Entity<ECSkuRelation>().HasMany(x => x.Relation).WithOne(op => op.ECSkuRelation).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"RelationId");

        #endregion

        #region ECSkuRelationItem Navigation properties

            modelBuilder.Entity<ECSkuRelationItem>().HasOne(x => x.ECSkuRelation).WithMany(op => op.Relation).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"RelationId");

        #endregion

        #region ECAsn Navigation properties

            modelBuilder.Entity<ECAsn>().HasMany(x => x.ReceivingCost).WithOne(op => op.ECAsn).IsRequired(false).HasForeignKey(@"ECAsnId");
            modelBuilder.Entity<ECAsn>().HasMany(x => x.Items).WithOne(op => op.ECAsn).IsRequired(false).HasForeignKey(@"ECAsnId");

        #endregion

        #region ECAsnItem Navigation properties

            modelBuilder.Entity<ECAsnItem>().HasOne(x => x.ECAsn).WithMany(op => op.Items).IsRequired(false).HasForeignKey(@"ECAsnId");
            modelBuilder.Entity<ECAsnItem>().HasMany(x => x.ProductCosts).WithOne(op => op.ECAsnItem).IsRequired(false).HasForeignKey(@"ECAsnItemId");
            modelBuilder.Entity<ECAsnItem>().HasMany(x => x.WarehouseAtrrs).WithOne(op => op.ECAsnItem).IsRequired(false).HasForeignKey(@"ECAsnItemId");

        #endregion

        #region ECAsnCost Navigation properties

            modelBuilder.Entity<ECAsnCost>().HasOne(x => x.ECAsn).WithMany(op => op.ReceivingCost).IsRequired(false).HasForeignKey(@"ECAsnId");

        #endregion

        #region ECAsnWarehouseAttr Navigation properties

            modelBuilder.Entity<ECAsnWarehouseAttr>().HasOne(x => x.ECAsnItem).WithMany(op => op.WarehouseAtrrs).IsRequired(false).HasForeignKey(@"ECAsnItemId");

        #endregion

        #region ECAsnProductCost Navigation properties

            modelBuilder.Entity<ECAsnProductCost>().HasOne(x => x.ECAsnItem).WithMany(op => op.ProductCosts).IsRequired(false).HasForeignKey(@"ECAsnItemId");

        #endregion

        #region ECShipBatch Navigation properties

            modelBuilder.Entity<ECShipBatch>().HasMany(x => x.PackingInfos).WithOne(op => op.ECShipBatch).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"OrderCode");
            modelBuilder.Entity<ECShipBatch>().HasMany(x => x.ProductInfos).WithOne(op => op.ECShipBatch).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"OrderCode");

        #endregion

        #region ECShipBatchPackingInfo Navigation properties

            modelBuilder.Entity<ECShipBatchPackingInfo>().HasOne(x => x.ECShipBatch).WithMany(op => op.PackingInfos).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"OrderCode");

        #endregion

        #region ECShipBatchProductInfo Navigation properties

            modelBuilder.Entity<ECShipBatchProductInfo>().HasOne(x => x.ECShipBatch).WithMany(op => op.ProductInfos).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"OrderCode");

        #endregion

        #region ECFbaBoxDetail Navigation properties

            modelBuilder.Entity<ECFbaBoxDetail>().HasOne(x => x.ECFbaQueryOrder).WithMany(op => op.FbaBoxDetail).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"OrderId");

        #endregion

        #region ECFbaFinalBox Navigation properties

            modelBuilder.Entity<ECFbaFinalBox>().HasOne(x => x.ECFbaBox).WithMany(op => op.FinalBox).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"FbaBoxId");

        #endregion

        #region ECFbaLog Navigation properties

            modelBuilder.Entity<ECFbaLog>().HasOne(x => x.ECFbaQueryOrder).WithMany(op => op.FbaOrderLog).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"OrderId");

        #endregion

        #region ECFbaOmsBox Navigation properties

            modelBuilder.Entity<ECFbaOmsBox>().HasOne(x => x.ECFbaBox).WithMany(op => op.OmsBox).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"FbaBoxId");

        #endregion

        #region ECFbaOrder Navigation properties

            modelBuilder.Entity<ECFbaOrder>().HasOne(x => x.ECFbaQueryOrder).WithOne(op => op.FbaOrder).OnDelete(DeleteBehavior.Cascade).IsRequired(true).HasForeignKey(typeof(ECFbaQueryOrder), @"FbaCode");

        #endregion

        #region ECFbaPackBox Navigation properties

            modelBuilder.Entity<ECFbaPackBox>().HasOne(x => x.ECFbaQueryOrder).WithMany(op => op.FbaPack).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"OrderId");

        #endregion

        #region ECFbaPackDetail Navigation properties

            modelBuilder.Entity<ECFbaPackDetail>().HasOne(x => x.ECFbaQueryOrder).WithMany(op => op.FbaPackDetail).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"OrderId");

        #endregion

        #region ECFbaQueryOrder Navigation properties

            modelBuilder.Entity<ECFbaQueryOrder>().HasMany(x => x.FbaBoxDetail).WithOne(op => op.ECFbaQueryOrder).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"OrderId");
            modelBuilder.Entity<ECFbaQueryOrder>().HasMany(x => x.FbaOrderLog).WithOne(op => op.ECFbaQueryOrder).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"OrderId");
            modelBuilder.Entity<ECFbaQueryOrder>().HasMany(x => x.FbaPack).WithOne(op => op.ECFbaQueryOrder).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"OrderId");
            modelBuilder.Entity<ECFbaQueryOrder>().HasMany(x => x.FbaPackDetail).WithOne(op => op.ECFbaQueryOrder).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"OrderId");
            modelBuilder.Entity<ECFbaQueryOrder>().HasOne(x => x.FbaOrder).WithOne(op => op.ECFbaQueryOrder).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(typeof(ECFbaQueryOrder), @"FbaCode");
            modelBuilder.Entity<ECFbaQueryOrder>().HasOne(x => x.FbaBox).WithOne(op => op.ECFbaQueryOrder).OnDelete(DeleteBehavior.Cascade).IsRequired(true).HasForeignKey(typeof(ECFbaBox), @"OrderId");

        #endregion

        #region ECFbaTransitBox Navigation properties

            modelBuilder.Entity<ECFbaTransitBox>().HasOne(x => x.ECFbaBox).WithMany(op => op.TransitBox).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"FbaBoxId");

        #endregion

        #region ECFbaBox Navigation properties

            modelBuilder.Entity<ECFbaBox>().HasOne(x => x.ECFbaQueryOrder).WithOne(op => op.FbaBox).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(typeof(ECFbaBox), @"OrderId");
            modelBuilder.Entity<ECFbaBox>().HasMany(x => x.FinalBox).WithOne(op => op.ECFbaBox).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"FbaBoxId");
            modelBuilder.Entity<ECFbaBox>().HasMany(x => x.OmsBox).WithOne(op => op.ECFbaBox).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"FbaBoxId");
            modelBuilder.Entity<ECFbaBox>().HasMany(x => x.TransitBox).WithOne(op => op.ECFbaBox).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"FbaBoxId");

        #endregion

        #region ResMenu Navigation properties

            modelBuilder.Entity<ResMenu>().HasMany(x => x.Children).WithOne(op => op.Parent).IsRequired(false).HasForeignKey(@"ParentId");
            modelBuilder.Entity<ResMenu>().HasOne(x => x.Parent).WithMany(op => op.Children).IsRequired(false).HasForeignKey(@"ParentId");

        #endregion

        #region BnsAmazonReport Navigation properties

            modelBuilder.Entity<BnsAmazonReport>().HasMany(x => x.BnsAmazonReportDetails).WithOne(op => op.BnsAmazonReport).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"AmazonReportId");

        #endregion

        #region BnsAmazonReportDetail Navigation properties

            modelBuilder.Entity<BnsAmazonReportDetail>().HasOne(x => x.BnsAmazonReport).WithMany(op => op.BnsAmazonReportDetails).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"AmazonReportId");

        #endregion

        #region BnsPaypalTransactionDetail Navigation properties

            modelBuilder.Entity<BnsPaypalTransactionDetail>().HasMany(x => x.BnsPaypalTransactionDetailsCartInfos).WithOne(op => op.BnsPaypalTransactionDetail).IsRequired(false).HasForeignKey(@"TransactionInfoId");

        #endregion

        #region BnsPaypalTransactionDetailsCartInfo Navigation properties

            modelBuilder.Entity<BnsPaypalTransactionDetailsCartInfo>().HasOne(x => x.BnsPaypalTransactionDetail).WithMany(op => op.BnsPaypalTransactionDetailsCartInfos).IsRequired(false).HasForeignKey(@"TransactionInfoId");

        #endregion

        #region BnsSendDeliverdToEc Navigation properties

            modelBuilder.Entity<BnsSendDeliverdToEc>().HasOne(x => x.ECSalesOrder).WithMany(op => op.BnsSendDeliverdToEcs).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"OrderId");

        #endregion

        #region ECOrderInfo Navigation properties

            modelBuilder.Entity<ECOrderInfo>().HasMany(x => x.opNode).WithOne(op => op.ECOrderInfo).OnDelete(DeleteBehavior.Cascade).IsRequired(true).HasForeignKey(@"OrderCode");
            modelBuilder.Entity<ECOrderInfo>().HasMany(x => x.order).WithOne(op => op.ECOrderInfo).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"OrderCode");
            modelBuilder.Entity<ECOrderInfo>().HasMany(x => x.orderLog).WithOne(op => op.ECOrderInfo).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"OrderCode");
            modelBuilder.Entity<ECOrderInfo>().HasMany(x => x.product).WithOne(op => op.ECOrderInfo).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"OrderCode");
            modelBuilder.Entity<ECOrderInfo>().HasMany(x => x.odaTypeArr).WithOne(op => op.ECOrderInfo).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"OrderCode");
            modelBuilder.Entity<ECOrderInfo>().HasOne(x => x.orderStatus).WithOne(op => op.ECOrderInfo).OnDelete(DeleteBehavior.Cascade).IsRequired(true).HasForeignKey(typeof(ECOrderInfoOrderStatu), @"OrderCode");
            modelBuilder.Entity<ECOrderInfo>().HasMany(x => x.orderAddress).WithOne(op => op.ECOrderInfo).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"OrderCode");
            modelBuilder.Entity<ECOrderInfo>().HasMany(x => x.packingList).WithOne(op => op.ECOrderInfo).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"OrderCode");

        #endregion

        #region ECOrderInfoBarcode Navigation properties

            modelBuilder.Entity<ECOrderInfoBarcode>().HasMany(x => x.ECOrderInfoProducts).WithOne(op => op.ECOrderInfoBarcode).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"BarcodeCodeId");

        #endregion

        #region ECOrderInfoOdaTypeArr Navigation properties

            modelBuilder.Entity<ECOrderInfoOdaTypeArr>().HasOne(x => x.ECOrderInfo).WithMany(op => op.odaTypeArr).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"OrderCode");

        #endregion

        #region ECOrderInfoOpNode Navigation properties

            modelBuilder.Entity<ECOrderInfoOpNode>().HasOne(x => x.ECOrderInfo).WithMany(op => op.opNode).OnDelete(DeleteBehavior.Cascade).IsRequired(true).HasForeignKey(@"OrderCode");

        #endregion

        #region ECOrderInfoOrder Navigation properties

            modelBuilder.Entity<ECOrderInfoOrder>().HasOne(x => x.ECOrderInfo).WithMany(op => op.order).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"OrderCode");
            modelBuilder.Entity<ECOrderInfoOrder>().HasOne(x => x.ECOrderInfoShip).WithMany(op => op.ECOrderInfoOrders).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"ShipId");

        #endregion

        #region ECOrderInfoOrderLog Navigation properties

            modelBuilder.Entity<ECOrderInfoOrderLog>().HasOne(x => x.ECOrderInfo).WithMany(op => op.orderLog).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"OrderCode");

        #endregion

        #region ECOrderInfoProduct Navigation properties

            modelBuilder.Entity<ECOrderInfoProduct>().HasOne(x => x.ECOrderInfo).WithMany(op => op.product).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"OrderCode");
            modelBuilder.Entity<ECOrderInfoProduct>().HasOne(x => x.ECOrderInfoBarcode).WithMany(op => op.ECOrderInfoProducts).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"BarcodeCodeId");

        #endregion

        #region ECOrderInfoShip Navigation properties

            modelBuilder.Entity<ECOrderInfoShip>().HasMany(x => x.ECOrderInfoOrders).WithOne(op => op.ECOrderInfoShip).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"ShipId");

        #endregion

        #region ECOrderInfoOrderStatu Navigation properties

            modelBuilder.Entity<ECOrderInfoOrderStatu>().HasOne(x => x.ECOrderInfo).WithOne(op => op.orderStatus).OnDelete(DeleteBehavior.Cascade).IsRequired(true).HasForeignKey(typeof(ECOrderInfoOrderStatu), @"OrderCode");

        #endregion

        #region ECOrderInfoAddrCountry Navigation properties

            modelBuilder.Entity<ECOrderInfoAddrCountry>().HasMany(x => x.ECOrderInfoAdresses).WithOne(op => op.ECOrderInfoAddrCountry).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"Country");

        #endregion

        #region ECOrderInfoAdress Navigation properties

            modelBuilder.Entity<ECOrderInfoAdress>().HasOne(x => x.ECOrderInfo).WithMany(op => op.orderAddress).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"OrderCode");
            modelBuilder.Entity<ECOrderInfoAdress>().HasOne(x => x.ECOrderInfoAddrCountry).WithMany(op => op.ECOrderInfoAdresses).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"Country");

        #endregion

        #region ECOrderInfoPackageInfo Navigation properties

            modelBuilder.Entity<ECOrderInfoPackageInfo>().HasMany(x => x.ECOrderInfoPackageLists).WithOne(op => op.ECOrderInfoPackageInfo).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"PackageInfoId");

        #endregion

        #region ECOrderInfoPackageList Navigation properties

            modelBuilder.Entity<ECOrderInfoPackageList>().HasOne(x => x.ECOrderInfo).WithMany(op => op.packingList).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"OrderCode");
            modelBuilder.Entity<ECOrderInfoPackageList>().HasOne(x => x.ECOrderInfoPackageInfo).WithMany(op => op.ECOrderInfoPackageLists).OnDelete(DeleteBehavior.Cascade).IsRequired(false).HasForeignKey(@"PackageInfoId");

        #endregion
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
